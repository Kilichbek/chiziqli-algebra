{"/chiziqli-algebra/jekyll/2025-03-02-vazifalar.html": {
    "title": "Vazifalar",
    "keywords": "Jekyll",
    "url": "/chiziqli-algebra/jekyll/2025-03-02-vazifalar.html",
    "body": "Vazifa 1: Vektorlar va Vektor Algebra 1.1 Vektor ustida amallar Agar \\(\\textbf{u}= \\begin{bmatrix} 5 \\\\ 2 \\\\ 9 \\end{bmatrix}\\) va \\(\\textbf{v}= \\begin{bmatrix} 1 \\\\ -8 \\\\ 6 \\end{bmatrix}\\), $c=0.5$ bo’lsa, quyidagilarni bajaring: $\\textbf{u} + \\textbf{v}$ $\\textbf{u} - \\textbf{v}$ $c\\textbf{u}$ $\\textbf{v}$ uzunligi $\\textbf{u}$ larining birlik vektori ko’rinishi 1.2 Vektor normasi va skalyar ko’paytma Agar \\(\\textbf{u}= \\begin{bmatrix} 1 \\\\ -1 \\\\ 2 \\end{bmatrix}\\) va \\(\\textbf{v}= \\begin{bmatrix} 3 \\\\ -1 \\\\ 4 \\end{bmatrix}\\), quyidagilarni toping: $\\textbf{u}$ vektorining $L_1$ normasi $\\textbf{v}$ vektorining $L_2$ normasi $\\textbf{u} \\cdot \\textbf{v}$ $d(\\textbf{u}, \\textbf{v})$ (Evklid masofa) $\\textbf{u}$ va $\\textbf{v}$ orasidagi burchak 1.3 Chiziqli kombinatsiya va bog’liqlik Quyidagilarni aniqlang: \\(\\textbf{u}= \\begin{bmatrix} 1 \\\\ 2 \\end{bmatrix}, \\textbf{v}= \\begin{bmatrix} 3 \\\\ 4 \\end{bmatrix}, \\textbf{w}= \\begin{bmatrix} 5 \\\\ 6 \\end{bmatrix}\\) chiziqli bog’liqmi? \\(\\textbf{u}= \\begin{bmatrix} 1 \\\\ 2 \\end{bmatrix}, \\textbf{v}= \\begin{bmatrix} 3 \\\\ 4 \\end{bmatrix}, \\textbf{w}= \\begin{bmatrix} 8 \\\\ 14 \\end{bmatrix}\\) chiziqli bog’liqmi? 1.4 📌 Mini-Loyiha: Oddiy Film Tavsiya Qiluvchi Tizim Tasavvur qiling siz Netflix companiyasida ishlayapsiz. Ma’lumotlar bazasi: Film nomi Jangari ⚔️ Romantik 💕 Fantastika 🚀 Drama 🎭 Komediya 😂 Sheryurak 5 1 2 1 0 Titanik 1 4 2 2 1 Avatar 3 2 5 2 1 Buyuk Getsbi 1 2 3 4 0 Pushti Pantera 1 1 4 1 5 Foydalanuvchi qiziqishlari: [Jangari = 5, Romantik = 3, Fantastika = 1, Drama = 2, Komediya = 2] 🎯 Maqsad: Foydalanuvchining yoqtirgan kino janrlariga asoslanib, unga mos filmlarni tavsiya qilish. Google Colab da vazifani bajarishingiz mumkin! Vazifa 1: Vektorlar va Vektor ustida amallar Vazifa 2: Matritsa Asoslari 2.1.1 Matritsani elementlarini o’zgartirish Quyidagi berilgan matritsa elementlarini shunda o’zgartiringki, natijada berilgan kulgan smaylik rasmi chiqsin. Izoh: siz pikselni o’zgartirishda, matritsa elementlarini o’zgartirish orqali rasmda o’zgarishni ko’rsatishingiz mumkin. Buning uchun 0 va 1 sonlaridan foydalanishingiz mumkin. 0 - oq rang, 1 - qora rang. import numpy as np import matplotlib.pyplot as plt # &lt; sizning kodlaringiz bu yerda yozing&gt; smile = np.zeros((16, 16), dtype=int) # &lt;pastdagi matritsa elementlarini o'zgartirng&gt; smile[4:6, 4:6] = 1 smile[4:6, 10:12] = 1 smile[10, 4:12] = 1 smile[11, 3:5] = 1 smile[11, 11:13] = 1 # Yaratilgan matritsa shunday ko'rinishda bo'lish kerak plt.imshow(smile, cmap='gray') 2.1.2 Matritsa Yaratish Quyidagi funksiyalardan foydalanib turli xil matritsalarni yarating: np.random.randint(a, b, (m, n)) # a va b orasidagi tasodifiy sonlar bilan to'ldirilgan m x n matritsa np.zeros((m, n)) # nol elementlar bilan to'ldirilgan m x n matritsa np.ones((m, n)) # bir elementlar bilan to'ldirilgan m x n matritsa 5 x 100 elementlarini 0 va 50 orasidagi tasodifiy sonlar bilan to’ldirilgan matritsa 100 x 5 nol elementlar bilan to’ldirilgan matritsa 5 x 5 bir elementlar bilan to’ldirilgan matritsa 2.2 Matritsa Ustida Amallar Quyidagi matritsalarni yaratib, ular ustida amallar bajarib ko’ring: \\(A = \\begin{bmatrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\end{bmatrix}\\), \\(B = \\begin{bmatrix} 5 &amp; 6 \\\\ 7 &amp; 8 \\end{bmatrix}\\) matritsalarni yarating. $A + B$ va $A - B$ amallarini toping $A B$ amalini toping $A \\textbf{v}$ amalini toping, \\(\\textbf{v} = \\begin{bmatrix} 1 \\\\ 2 \\end{bmatrix}\\) $A B \\textbf{v}$ amalini toping $A \\odot B $ amalini toping $A^T$ va $B^T$ amallarini toping $A \\odot B^T$ amalini toping $A^T B$ amalini toping $A^T B^T$ amalini toping $\\text{tr}(A)$ va $\\text{tr}(B)$ amallarini toping $\\text{tr}(A B)$ va $\\text{tr}(B A)$ amallarini toping $\\text{tr}(A B^T)$ va $\\text{tr}(B^T A)$ amallarini toping $\\text{tr(A - B)}$ va $\\text{tr(A) - tr(B)}$ tengliklarini tekshiring 2.3 🎨 Mini-Loyiha: Tasvirni Manipulyatsiya Qilish 🖼️ 🎯 Maqsad Berilgan tasvir ustida matritsa amallari yordamida ishlov berish va uni kulrang tasvirga (grayscale) aylantirish. 📌 Tasvir va Matritsa Tushunchasi Rangli tasvir (RGB) 3 ta matritsadan iborat: 🔴 R (Red) – Qizil rang matritsasi 🟢 G (Green) – Yashil rang matritsasi 🔵 B (Blue) – Ko‘k rang matritsasi Har bir matritsa 0 dan 255 gacha bo‘lgan qiymatlardan iborat bo‘lib, tasvirning har bir pikselini ifodalaydi. Misol: Quyidagi rangli tasvirni uchta matritsaga ajratish mumkin: 📷 Tasvir haqida ma’lumot: Bu rasm Buxoro amiri Muhammad Olimxon (1880–1944) ga tegishli bo‘lib, 1911-yilda Sergey Prokudin-Gorskiy tomonidan olingan. Surat uch xil ko‘k, yashil va qizil (RGB) filtrlar yordamida tushirilgan va keyinchalik rangli tasvirga aylantirilgan. 📌 Kulrang Tasvir (Grayscale) Kulrang tasvirda faqat yorug‘lik intensivligi saqlanadi, ranglar esa yo‘qoladi. Tasvirni kulrangga aylantirish uchun quyidagi formuladan foydalanamiz: \\[Y = 0.299 \\cdot R + 0.587 \\cdot G + 0.114 \\cdot B\\] Bu yerda: ✅ Y – Yorug‘lik intensivligi matritsasi (grayscale) ✅ R, G, B – Qizil, yashil va ko‘k ranglar matritsalari 📌 Qadamlar 🛠️ 1. Tasvirning maksimum va minimum piksel qiymatlarini topish np.max() va np.min() funksiyalaridan foydalaning. 📏 2. Tasvir o‘lchamini aniqlash Tasvir matritsasining qator, ustun va kanallar sonini toping. 🌈 3. Tasvirni RGB kanallariga ajratish Har bir rang matritsasini ajratish uchun img[:, :, i] indekslashdan foydalaning. 📊 4. Har bir rang matritsasini [0,1] oralig‘iga normallashtirish Formula: \\(I = \\frac{X - X_{min}}{X_{max} - X_{min}}\\) ⚫ 5. Tasvirni “Grayscale” ga o‘tkazish Formula: \\(Y = 0.299 \\cdot R + 0.587 \\cdot G + 0.114 \\cdot B\\) O‘lchamni o‘zgartirmasdan, ranglarni intensivlikka aylantiring. 🎯 Natija: Siz tasvirni matritsalar asosida tahlil qilish va uni kulrang formatga o‘tkazish bo‘yicha bilim va tajriba olasiz! 🚀 Google Colab da vazifani bajarishingiz mumkin! Vazifa 2: Matritsa Asoslari Vazifa 3: Transformatsiya va Chiziqli Tenglamalar Tizimi Vazifa 3.1.1 Chiziqli Transformatsiya (Linear Transformation) Quyidagi funksiyalardan qaysinisi chiziqli transformatsiya (linear transformation) hisoblanadi? $f_1: \\mathbb{R}^2 \\to \\mathbb{R}^2, f_1(x, y) = (x, -y)$ $f_2: \\mathbb{R}^3 \\to \\mathbb{R}^3, f_2(x, y, z) = (xy, x, y)$ Vazifa 3.1.2 Chiziqli Transformatsiyalarni amalga oshirish siljish (shear) y-o’qi bo’yicha $m = 1.5$ aks (reflection) y o’qiga nisbatan siqish (squeeze) y o’qiga nisbatan $k = 0.2$ va x o’qiga nisbatan $l = 0.5$ masshtablash (scaling) $s = 2$ aylantirish (rotation) $\\theta = 45^\\circ$ import numpy as np import matplotlib.pyplot as plt transformations = { 'Siljish': , # matritsa yozing 'Aks': , # matritsa yozing 'Siqish': , # matritsa yozing 'Masshtablash': , # matritsa yozing 'Aylantirish 45°': # matritsa yozing } x = np.array([[1], [1]]) fig, axs = plt.subplots(1, 5, figsize=(12, 3)) for ax, (title, A) in zip(axs.flatten(), transformations.items()): y = A @ x ax.quiver(0, 0, x[0], x[1], angles='xy', scale_units='xy', scale=1, color='blue', label='Original Vektor') ax.quiver(0, 0, y[0], y[1], angles='xy', scale_units='xy', scale=1, color='red', label='O\\'zgargan Vector') ax.set_xlim(-3, 3) ax.set_ylim(-3, 3) ax.axhline(0, color='black', linewidth=0.5) ax.axvline(0, color='black', linewidth=0.5) ax.grid(True) ax.set_title(title) plt.legend() plt.tight_layout() plt.show() Vazifa 3.2.1: Chiziqli Tenglamalar Tizimini yechish Berilgan chiziqning tenglamalar tizimini yeching: Gauss usuli orqali \\[\\begin{cases} x_1 + x_2 - 2x_3 = 1 \\\\ 2x_1 - 3x_2 + x_3 = -8 \\\\ 3x_1 + x_2 + 4x_3 = 3 \\end{cases}\\] Teskari matritsa orqali \\[\\begin{cases} x + 2y = 4 \\\\ 3x − 5y = 2 \\end{cases}\\] 3.3 🏦 Mini-Loyiha: Iqtisodiy Tarmoqlararo Muvozanat 📊 🎯 Maqsad Leontief Kirim-Chiqim Modeli yordamida iqtisodiy tarmoqlarning o‘zaro bog‘liqligini tahlil qilish va ishlab chiqarish talablarini bashorat qilish. 📖 Leontief Kirim-Chiqim Modeli Bu model iqtisodiyotdagi tarmoqlar o‘rtasidagi resurs almashinuvini ifodalaydi. Har bir tarmoq: ✅ O‘z mahsulotining bir qismini boshqa tarmoqlarga yetkazib beradi. ✅ Ishlab chiqarish jarayonida boshqa tarmoqlarning mahsulotlaridan foydalanadi. 👨‍💼 Misol: Sizda uchta iqtisodiy tarmoq mavjud: 🌾 Qishloq xo‘jaligi 🏭 Sanoat 🏢 Xizmatlar Har bir tarmoq o‘z ishlab chiqarish jarayonida boshqa tarmoqlarning mahsulotlariga ehtiyoj sezadi. Quyidagi jadval 1 milliard so‘mlik mahsulot ishlab chiqarish uchun boshqa tarmoqlardan qancha xarajat talab qilinishini ko‘rsatadi: Tarmoq 🌾 Qishloq xo‘jaligi 🏢 Xizmatlar 🏭 Sanoat 🌾 Qishloq xo‘jaligi 0.01 0.002 0.04 🏢 Xizmatlar 0.02 0.004 0 🏭 Sanoat 0 0.01 0.02 🔹 Tushuntirish: Masalan, 1 milliard so‘mlik tovar ishlab chiqarish uchun: Qishloq xo‘jaligi 0.01 milliard so‘m o‘ziga, 0.002 milliard so‘m xizmatlarga, va 0.04 milliard so‘m sanoatga sarflash kerak. 📌 Talab Vektori Davlat har bir tarmoq uchun yakuniy talab miqdorini belgilaydi: Qishloq xo‘jaligi → 100 milliard so‘m Xizmatlar → 200 milliard so‘m Sanoat → 300 milliard so‘m ❓ Savol Har bir tarmoq uchun umumiy ishlab chiqarish hajmi qancha? 📌 Yechim: Leontief Kirim-Chiqim Modeli Leontief modeliga ko‘ra, ishlab chiqarish vektori ($\\mathbf{x}$) quyidagi tenglama orqali aniqlanadi: \\[\\mathbf{x} = \\mathbf{A} \\mathbf{x} + \\mathbf{y}\\] Bu yerda: ✅ $\\mathbf{x}$ – ishlab chiqarish hajmi vektori ✅ $\\mathbf{y}$ – yakuniy talab vektori ✅ $\\mathbf{A}$ – iste’mol matritsasi 📌 Qadamlar Iste’mol matritsa ($\\mathbf{A}$) va talab vektori ($\\mathbf{y}$) ni yaratish Ishlab chiqarish hajmini ($\\mathbf{x}$) aniqlash Chiziqli tenglamani yechish Google Colab da vazifani bajarishingiz mumkin! Vazifa 3: Chiziqli Transformatsiya Vazifa 4: Vektor Fazolar va Ortogonalizatsiya Vazifa 4.1.1 Bazis va Subfazolar \\(\\left \\{ \\begin{bmatrix} 1 \\\\ -2 \\\\ -1 \\end{bmatrix}, \\begin{bmatrix} 2 \\\\ -3 \\\\ 1 \\end{bmatrix}, \\begin{bmatrix} 5 \\\\ -8 \\\\ 1 \\end{bmatrix} \\right \\}\\) vektorlar to’plami $R^3$ fazoga bazis bo’la oladimi? $V$ subfazo hisoblanadimi? \\[V = \\left \\{ \\begin{bmatrix} a \\\\ b \\end{bmatrix} \\in \\mathbb{R}^2; 2a=3b \\right \\}\\] \\[V = \\left \\{ \\begin{bmatrix} a \\\\ b \\end{bmatrix} \\in \\mathbb{R}^2; ab=0 \\right \\}\\] Vazifa 4.1.2: Matritsa Rangi Ushbu matritsalarni rangini aniqlang: \\[\\begin{bmatrix} 3 &amp; -1 \\\\ 1 &amp; 3 \\end{bmatrix}\\] \\[\\begin{bmatrix} 1 &amp; 2 &amp; 1 \\\\ -2 &amp; -3 &amp; 1 \\\\ 3 &amp; 5 &amp; 0 \\end{bmatrix}\\] Vazifa 4.2: Ortogonallik va Proeksiya Ushbu vektorlar ortogonalmi? \\(\\begin{bmatrix} 1 \\\\ 2 \\\\ 3 \\end{bmatrix}\\) va \\(\\begin{bmatrix} 4 \\\\ 5 \\\\ 6 \\end{bmatrix}\\) \\(\\begin{bmatrix} -1 \\\\ 1\\\\ 0 \\end{bmatrix}\\) va \\(\\begin{bmatrix} 1 \\\\ 1 \\\\ -1 \\end{bmatrix}\\) \\(\\mathbf{u}\\) vektorni \\(\\mathbf{v}\\) vektordagi proeksiyasini toping, agar: \\(\\mathbf{u} = \\begin{bmatrix} 1 \\\\ 2 \\end{bmatrix}\\) va \\(\\mathbf{v} = \\begin{bmatrix} 3 \\\\ 4 \\end{bmatrix}\\) \\(\\mathbf{u} = \\begin{bmatrix} 1 \\\\ 2 \\\\ 3 \\end{bmatrix}\\) va \\(\\mathbf{v} = \\begin{bmatrix} 3 \\\\ 4 \\\\ 5 \\end{bmatrix}\\) \\(\\mathbf{v}\\) vektorni \\(\\{ \\mathbf{u}_1, \\mathbf{u}_2 \\}\\) basiz vektorlardan tashkil topgan subfazoga proyeksiyasini toping, agar: \\(\\mathbf{u}_1 = \\begin{bmatrix} 1 \\\\ 1 \\\\ 1 \\end{bmatrix}\\), \\(\\mathbf{u}_2 = \\begin{bmatrix} 0 \\\\ 1 \\\\ 2 \\end{bmatrix}\\) va \\(\\mathbf{v} = \\begin{bmatrix} 6 \\\\ 0 \\\\ 0 \\end{bmatrix}\\) 4.3 🏘️ Mini-Loyiha: Sotuv Miqdorini Modellashtirish (Chiziqli Model) 📊 🎯 Maqsad Toshkent shahridagi kvartira narxlari va ularning maydoni (m²) o‘rtasidagi bog‘liqlikni tahlil qilish, va chiziqli model asosida kelajakdagi uy narxini bashorat qilish. 📖 Voqea Tavsifi Sizga Toshkentdagi turli hududlarda joylashgan kvartiralarning maydoni (m²) va ularning narxi (ming dollar) bo‘yicha ma’lumotlar berilgan. Ma’lumotlarni o‘rganish natijasida aniqlanganki, narx odatda maydon oshishi bilan chiziqli ravishda ortib boradi. Shunday qilib, quyidagi chiziqli model taklif qilinadi: \\(y = c_0 + c_1 x\\) Bu yerda: $y$ — kvartiraning narxi (ming dollar) $x$ — kvartira maydoni (m²) $c_0$ — boshlang‘ich narx (asosiy xizmatlar, joylashuv, va h.k.) $c_1$ — har bir kvadrat metr uchun narx (ming dollar/m²) Sizga bir nechta kuzatish nuqtalari berilgan: \\[(x_0, y_0),\\ (x_1, y_1),\\ \\dots,\\ (x_n, y_n)\\] Modelni quyidagi matritsa ko‘rinishida yozamiz: \\[A = \\begin{bmatrix} 1 &amp; x_0 \\\\ 1 &amp; x_1 \\\\ \\vdots &amp; \\vdots \\\\ 1 &amp; x_n \\end{bmatrix} ,\\quad \\mathbf{y} = \\begin{bmatrix} y_0 \\\\ y_1 \\\\ \\vdots \\\\ y_n \\end{bmatrix} ,\\quad \\mathbf{c} = \\begin{bmatrix} c_0 \\\\ c_1 \\end{bmatrix}\\] Model tenglamasi: \\(A \\mathbf{c} \\approx \\mathbf{y}\\) Eng kichik kvadratlar usuli (Least Squares Method) Chiziqli model parametrlarini aniqlash uchun eng kichik kvadratlar usulidan foydalanamiz: \\[\\boxed{\\mathbf{c} = (A^T A)^{-1} A^T \\mathbf{y}}\\] 📌 Amalga oshirish Qadamlar 1️⃣ $A$ matritsani yarating (ustunlar: 1 va $x$) 2️⃣ Hisoblang: $A^T A$ $A^T \\mathbf{y}$ $(A^T A)^{-1}$ 3️⃣ Quyidagi formula orqali $\\mathbf{c}$ ni toping: \\(\\mathbf{c} = (A^T A)^{-1} A^T \\mathbf{y}\\) 🎯 Natija: Siz ma’lumotlardan foydalangan holda chiziqli regressiya modelini yaratishni va eng kichik kvadratlar yordamida uning koeffitsiyentlarini aniqlashni o‘rganasiz — bu ma’lumot tahlili va mashinaviy o‘rganishning asosiy vositalaridan biridir. 🚀 Google Colab da vazifani bajarishingiz mumkin! Vazifa 4: Vektor Fazolar va Ortogonalizatsiya Vazifa 5: Ilg’or Matritsa tushunchalari Vazifa 5.1.1 Determinant topish Ushbu matritsalarning determinantlarini toping: \\(\\mathbf{A} = \\begin{bmatrix} 4 &amp; -2 \\\\ 1 &amp; -9 \\end{bmatrix} \\quad \\quad \\mathbf{B} = \\begin{bmatrix} 4 &amp; 5 &amp; 3 \\\\ 1 &amp; 2 &amp; 3 \\\\ 1 &amp; 2 &amp; 3 \\end{bmatrix}\\) Vazifa 5.1.2: Matritsaning normasini topish Agar \\(\\mathbf{A} = \\left[ \\begin{array}{rr} -5 &amp; 2 \\\\ -7 &amp; 4 \\end{array} \\right]\\), uning quyidagi normalarini toping: - Frobenius normasini - Maksimum norm normasini - Sprektral norm normasini Vazifa 5.1.3: Matritsani yoyish Agar \\(\\mathbf{A} = \\left[ \\begin{array}{rr} 4 &amp; 1 \\\\ 2 &amp; 3 \\end{array} \\right]\\), uni - $\\textbf{LU}$ yoying - $\\textbf{QR}$ yoying - $Eigen$ yoying 5.2 🌌 Mini-Loyiha: Tasvirini Kompreslash 🎯 Maqsad Singular yoyish (SVD) yordamida tasvirni hajm jihatidan siqish va faqat eng muhim komponentlar bilan tiklash sifatini tahlil qilish. Siz ishlayotgan tasvir — Habbl kosmik teleskopi tomonidan olingan mashhur “Yaratilish ustunlari “ manzarasining kulrang (grayscale) versiyasi. Bu tasvir o‘zining yuqori aniqligi va murakkab tuzilishi bilan ma’lum. Ammo, rasm katta hajmi sababli, rasmni saqlash va uzatish uchun katta xotira va tezkor aloqa qurilmalar kerak bo’ladi. Lekin, tasvirni kompreslasak, ularga ehtiyoj sezilmaydi. Siz NASA’ga yordam berish uchun rasmni kompreslash algoritmini yaratishingiz kerak. 💡 SVD yordamida tasvirni kompresslash Tasvirni matritsa sifatida qarasak ($A \\in \\mathbb{R}^{m \\times n}$), uni quyidagicha Singular Yoyish (SVD) orqali ifodalash mumkin: \\[\\textbf{A} = \\mathbf {U\\Sigma V^{T}} = \\Bigg[ \\mathop{\\color{red}{\\mathbf u_1}} \\limits_|^| \\ \\mathop{\\color{red}{\\mathbf u_2}} \\limits_|^| \\ \\cdots \\ \\mathop{\\mathbf u_m} \\limits_|^| \\Bigg] \\left[\\begin{array}{cccc|c} \\color{red}{\\sigma_1} &amp; &amp; &amp; \\\\ &amp; \\color{red}{\\sigma_2} &amp; &amp; \\\\ &amp; &amp; \\ddots &amp; &amp; \\boldsymbol{0} \\\\ &amp; &amp; &amp; \\sigma_r &amp; \\\\ \\hline &amp; \\boldsymbol{0} &amp; &amp; \\boldsymbol{0} \\end{array} \\right]_{m \\times n} \\Bigg[ \\mathop{\\color{red}{\\mathbf v_1}} \\limits_|^| \\ \\mathop{\\color{red}{\\mathbf v_2}} \\limits_|^| \\ \\cdots \\ \\mathop{\\mathbf v_n} \\limits_|^| \\Bigg] ^{T}\\] 🔹 Asosiy g‘oya: Faqat eng muhim $k$ ta singular qiymat ($\\sigma_1, \\dots, \\sigma_k$) va ularga mos ustun/qatordan foydalanib, matritsani taxminiy tiklash mumkin. Masalan $k=2$ bo’lsa, biz qizil rangdagi vektor va singulyar qiymatlarni tanlab matritsaning qolgan qora rangdagi elementlarini tashlab yuborishimiz mumkin. 🔧 Qadamlar: Tasvirni kompresslash va tiklash np.linalg.svd() yordamida $A = U \\Sigma V^T$ ga yoying Singulyar qiymatlarni matplotlib orqali grafik chizib tasvirlang Quyidagi $k$ qiymatlar uchun tasvirni qayta tiklang: $k=1, 10, 20, 50, 100$ $k=100$ bo’lganida Kompresslash nisbatini toping original rasm uchun qancha sonlar kerak kompresslangan rasm uchun qancha sonlar kerak qancha joy ortib qoldi: (org - komp) / org Google Colab da vazifani bajarishingiz mumkin! Vazifa 5: Ilg’or Matritsa Tushunchalari"
  },"/chiziqli-algebra/jekyll/2025-02-28-ilgor_matritsa.html": {
    "title": "Modul 5. Il’gor matritsa tushunchalari",
    "keywords": "Jekyll",
    "url": "/chiziqli-algebra/jekyll/2025-02-28-ilgor_matritsa.html",
    "body": "Bu darsda biz matritsalar bilan bog’liq ba’zi muhim tushunchalarni ko’rib chiqamiz. Bu tushunchalar sizga matritsalar bilan ishlashda va ularni yanada chuqurroq tushunishga yordam beradi. 4.1 Determinant 4.1.1 Determinant nima? Determinant - bu kvadrat matritsa bilan bog’liq bo’lgan son. U matritsaning o’ziga xos xossalarini ifodalaydi va ko’plab matematik va fizik muammolarni hal qilishda muhim rol o’ynaydi. U \\(\\text{det}(\\mathbf{A})\\) yoki \\(|\\mathbf{A}|\\) bilan ifodalanadi. Determinantning asosiy xususiyatlari: $\\text{det}(\\textbf{I}) = 1$ $\\text{det}(\\textbf{A}) = 0 \\Rightarrow \\textbf{A}$ matritsa teskari mavjud emas $\\text{det}(c \\textbf{A}) = c^n \\text{det}(\\textbf{A})$ $\\text{det}(\\textbf{A}^T) = \\text{det}(\\textbf{A})$ $\\text{det}(\\textbf{A}^{-1}) = \\frac{1}{\\text{det}(\\textbf{A})}$ $\\text{det}(\\textbf{AB}) = \\text{det}(\\textbf{A}) \\text{det}(\\textbf{B})$ $\\text{det}(\\textbf{A}^n) = (\\text{det}(\\textbf{A}))^n$ $\\text{det}(\\textbf{A}) = \\prod_{i=1}^{n} a_{ii}~$, agar $\\textbf{A}$ uchburchak matritsa bo’lsa 4.1.2 Determinantning Geometrik ma’nosi? 2-D’da determinant - bu ikki vektor hosil qilgan parallelogramning maydoni 3-D’da determinant - bu uchta vektor hosil qilgan parallelepipedning hajmi 2D parallelogram 3D parallelepiped \\(\\textbf{A} = \\begin{bmatrix} a &amp; b \\\\ c &amp; d \\end{bmatrix}\\) \\(\\textbf{A} = \\begin{bmatrix} \\mathbf{r_1} &amp; \\mathbf{r_2} &amp; \\mathbf{r_3} \\end{bmatrix}\\) 4.1.3 Determinantni hisoblash? $2 \\times 2$ matritsa uchun: \\(\\text{det}(\\textbf{A}) = \\begin{vmatrix} a &amp; b \\\\ c &amp; d \\end{vmatrix} = ad - bc\\) $3 \\times 3$ matritsa uchun: \\(\\text{det}(\\textbf{A}) = \\begin{vmatrix} a &amp; b &amp; c \\\\ d &amp; e &amp; f \\\\ g &amp; h &amp; i \\end{vmatrix} = aei + bfg + cdh - ceg - bdi - afh\\) $n &gt; 3$ uchun: kofaktorlar yordamida tayanch (pivot) formulasi yordamida import numpy as np A = np.array([ [1, 2, 3], [4, 5, 6], [7, 8, 9] ]) det_A = np.linalg.det(A) print(f'A matritsaning determinanti: {det_A}') 4.2 “Eigen” tushuncha Ushbu animatsiyada, qizil chiziq bo’yicha xarakatlanayotgan vektorlar ko’rsatilgan. Bu vektorlar matritsa bilan ko’paytirilganda o’z yo’nalishini o’zgartirmaydi, balki faqat uzunligi o’zgaradi. Bunday vektorlar eigenvektorlar deb ataladi: Yana bir misol: Ushbu Mona Lisa rasmini transformatsiya (siljitish) qilganimizda, qizil ko’rsatkich yo’nalishini o’zgartirgan, ko’k ko’rsatgich esa o’z yo’nalishini o’zgartirmagan. Bunday ko’rsatgichlar eigenvektorlar deb ataladi. Ular transformatsiya ostida o’z yo’nalishini o’zgartirmaydi, balki faqat uzunligi o’zgaradi. Matematik tarzda bunday vektorlar quyidagi tenglama orqali ifodalanadi: \\[\\boxed{\\textbf{A} \\mathbf{v} = \\lambda \\mathbf{v}}\\] Bu erda $\\textbf{A}$ - matritsa, $\\mathbf{v}$ - eigenvektor va $\\lambda$ - eigenqiymat (eigenvalue). 4.2.1 Eigenvektorlar va Eigenqiymatlarni topish $\\textbf{A} \\mathbf{v} = \\lambda \\mathbf{v}$ tenglamasini quyidagi ko’rinishga keltiramiz: \\(\\textbf{A} \\mathbf{v} - \\lambda \\mathbf{v} = \\mathbf{0}\\) So’ng quyidagi ko’rinishga keltiramiz: \\((\\textbf{A}- \\lambda \\mathbf{I}) \\mathbf{v} = \\mathbf{0}\\) $\\mathbf{v}$ vektorning nolga teng bo’lmagan yechimi bo’lishi uchun, faqat va faqat $\\text{det}(\\textbf{A}- \\lambda \\mathbf{I}) = 0$ bo’lishi kerak. Bu erda $\\mathbf{I}$ - birlik matritsa. Bu tenglama xarakteristik tenglama deb ataladi. Bu tenglamani yechish orqali $\\lambda$ eigenqiymatlarni topamiz. Har bir $\\lambda$ uchun $ (\\textbf{A}- \\lambda \\mathbf{I}) \\mathbf{v} = \\mathbf{0}$ tenglamasini yechish orqali $\\mathbf{v}$ eigenvektorlarni topamiz. Misol: Bizga \\(\\textbf{A} = \\begin{bmatrix} 2 &amp; 1 \\\\ 1 &amp; 2 \\end{bmatrix}\\) matritsa berilgan. Maqsadimiz uning eigenvektor va eigenqiymatlarini topish. Xarakteristik tenglama: \\[\\det(A-\\lambda I)={\\begin{vmatrix}2-\\lambda &amp;1\\\\1&amp;2-\\lambda \\end{vmatrix}}=3-4\\lambda +\\lambda ^{2}\\] \\[\\lambda = 1 \\text{ yoki } \\lambda = 3\\] Shunda, eigenvektorlarni topish uchun quyidagi tenglamani yechamiz: $\\lambda = 1$ $\\lambda = 3$ \\(\\mathbf{A}-\\lambda \\mathbf{I} = \\begin{bmatrix} 1 &amp; 1 \\\\ 1 &amp; 1 \\end{bmatrix}\\) \\(\\mathbf{A}-\\lambda \\mathbf{I} = \\begin{bmatrix} -1 &amp; 1 \\\\ 1 &amp; -1 \\end{bmatrix}\\) \\(\\begin{bmatrix} 1 &amp; 1 \\\\ 1 &amp; 1 \\end{bmatrix}\\textbf{v} = \\begin{bmatrix} 0 \\\\ 0 \\end{bmatrix}\\) \\(\\begin{bmatrix} -1 &amp; 1 \\\\ 1 &amp; -1 \\end{bmatrix}\\textbf{v} = \\begin{bmatrix} 0 \\\\ 0 \\end{bmatrix}\\) \\(\\mathbf {v}_{\\lambda =1}={\\begin{bmatrix}1\\\\-1\\end{bmatrix}}\\) \\(\\mathbf {v} _{\\lambda =3}={\\begin{bmatrix}1\\\\1\\end{bmatrix}}\\) 4.2.1 Eigen xossalari va Eigen-vektor matritsasi ${\\displaystyle \\operatorname {tr} (A)=\\sum {i=1}^{n}a{ii}=\\sum _{i=1}^{n}\\lambda _{i}=\\lambda _{1}+\\lambda _{2}+\\cdots +\\lambda _{n}.}$ ${\\displaystyle \\det(A)=\\prod _{i=1}^{n}\\lambda _{i}=\\lambda _{1}\\lambda _{2}\\cdots \\lambda _{n}.}$ $\\textbf{A}$ matritsaning teskarisi mavjud, agar uning har bir eigenqiymatlari $0$ ga teng bo’lmasa. Yuqoridan (quyidan) uchburchak matritsaning eigen-qiymatlari dioganal elementlarga teng bizda $n$ ta chiziqli bog’liq bo’lmagan eigen-vektorlar mavjud ${ \\textbf{s}_1, \\textbf{s}_2, …, \\textbf{s}_n }$ \\[\\textbf{S} = \\Bigg[ \\mathop{\\mathbf s_1}\\limits_|^| \\ \\mathop{\\mathbf s_2}\\limits_|^| \\ \\cdots \\ \\mathop{\\mathbf s_n}\\limits_|^| \\Bigg]\\] $\\textbf{S}$ - eigen-vektor matritsasi 4.3 Matritsa normasi (Matrix norm) 4.3.1 Matritsa normasi tushunchasi va xossalari Matritsa normasi - bu matritsaning “o’lcham”ini belgilovchi, manfiy bo’lmagan skalar qiymat qaytaruvchi funksiya. \\[\\|A\\| \\geq 0\\] \\[\\|\\alpha A\\| = |\\alpha| \\|A\\|\\] \\[\\|A + B\\| \\leq \\|A\\| + \\|B\\|\\] \\[\\|AB\\| \\leq \\|A\\| \\|B\\|\\] 4.3.2 Matritsa normasi turlari Frobenius normasi (Frobenius norm) Frobenius normasi (Frobenius norm) \\[{\\displaystyle \\|A\\|_{\\text{F}}={\\sqrt {\\sum _{i}^{m}\\sum _{j}^{n}|a_{ij}|^{2}}}}\\] 1-normasi (1-norm) \\[{\\displaystyle \\|A\\|_{1 }=\\max _{j = 1, ..., n}\\sum_{j=1}^{n}|a_{ij}|.}\\] Spektr normasi (Spectral norm) \\({\\displaystyle \\|A\\|_{2}={\\sqrt {\\lambda _{\\max }\\left(A^{T}A\\right)}}}\\) import numpy as np A = np.array([[1, 2], [3, 4]]) frobenius_norm = np.linalg.norm(A, 'fro') max_norm = np.linalg.norm(A, 1) spectral_norm = np.linalg.norm(A, 2) print(f'Frobenius norm: {frobenius_norm}') print(f'Maximum norm: {max_norm}') print(f'Spectral norm: {spectral_norm}') 4.4 Matritsani Yoyish (Matrix Decomposition) Matritsani yoyish degani bu matritsani boshqa matritsalarga bo’lishdir. Bu jarayon ko’plab matematik va fizik muammolarni hal qilishda qo’llaniladi. Yoyish jarayoni matritsaning o’ziga xos xossalarini aniqlashga yordam beradi. Masalan siz $6 = 2 \\cdot 3$ deb yozishingiz mumkin. Bu erda $2$ va $3$ - $6$ ning yoyishidir ya’ni faktorlarga ajratish. Faktorlarga ajratganimizda masalan biz $6$ sonining xususiyatlarni aniqlaymiz: $2$ va $3$ ga bo’linishi, just son ekanligi. Matritsani yoyishning ko’plab usullari mavjud. Qo’llanilishiga qarab, ushbu usullarning ba’zilari boshqalarga qaraganda foydaliroqdir. Bu darsda biz matritsani yoyishning eng ko’p qo’llaniladigan usullari bilan tanishamiz: $\\textbf{LU}$ yoyish $\\textbf{QR}$ yoyish $\\textit{Eigen}$ yoyish $\\textbf{SVD}$ yoyish 4.4.1 $\\textbf{LU}$ yoyish Matritsani yoyishning keng tarqalgan usullaridan biri $\\textbf{LU}$ yoyishdir. Odatda chiziqli tenglamalar tizimini yechishda va matritsaning determinantini topish uchun foydalaniladi. $\\textbf{LU}$ yoyishi Gauss usulini osonroq bajarish uchun kvadrat matritsani ikkita uchburchak matritsalarga parchalaydi. U ushbu chiziqli algebra teoremasiga asoslanadi: Har qanday singulyar (ya’ni teskarisi mavjud emas) bo’lmagan kvadrat matritsa $\\textbf{A}$, bir xil tartibdagi ikkita uchburchak matritsaning $\\textbf{L}$ va $\\textbf{U}$ ko’paytmasi sifatida yozilishi mumkin, shunday qilib $\\textbf{L}$ matritsa quyidan uchburchak matritsa (asosiy diagonal ustidagi barcha elementlar 0 ga teng) $\\textbf{U}$ yuqoridan uchburchak matritsa (asosiy diagonal ostidagi barcha elementlar 0 ga teng). Matematik ifodasi: \\[\\begin{split} \\underset{n\\times n}{\\mathbf{A}} &amp;= \\underset{n\\times n}{\\mathbf{L}}~ \\underset{n\\times n}{\\mathbf{U}} \\\\[2ex] &amp;= \\begin{bmatrix} l_{11} &amp; 0 &amp; 0 &amp; \\ldots &amp; 0\\\\ l_{21}&amp; l_{22} &amp; 0 &amp; \\ldots &amp; 0\\\\ l_{31}&amp; l_{32} &amp; l_{33} &amp; \\ldots &amp; 0\\\\ \\vdots &amp; \\vdots &amp;\\vdots &amp; \\ddots &amp; \\vdots \\\\ l_{n1} &amp; l_{n2} &amp; l_{n3} &amp; \\ldots &amp; l_{nn} \\end{bmatrix}\\begin{bmatrix} u_{11} &amp; u_{12} &amp; u_{13} &amp; \\ldots &amp; u_{1n}\\\\ 0 &amp; u_{22} &amp; u_{23} &amp; \\ldots &amp; u_{2n}\\\\ 0 &amp; 0 &amp; u_{33} &amp; \\ldots &amp; u_{3n}\\\\ \\vdots &amp; \\vdots &amp;\\vdots &amp; \\ddots &amp; \\vdots \\\\ 0 &amp; 0 &amp; 0 &amp; \\ldots &amp; u_{nn} \\end{bmatrix} \\end{split}\\] 4.4.1.1 $\\textbf{LU}$ yoyishni hisoblash Maqsadimiz: bizga berilgan $\\textbf{A}$ matritsasini $\\textbf{LU}$ yoyish orqali $\\textbf{L}$ va $\\textbf{U}$ matritsalarini topish. Deylik, misol uchun, bizga quyidagi matritsa berilgan: \\[\\mathbf{A} = \\begin{bmatrix} 1 &amp; 2 &amp; 3 \\\\ 2 &amp; 3 &amp; 1 \\\\ -2 &amp; 3 &amp; -2 \\end{bmatrix}\\] Bu matritsanin $\\textbf{LU}$ yoyishini topish uchun quyidagi qadamlarni bajaramiz: $\\textbf{A}$ matritsani birlik matritsa bilan kengaytiramiz: \\[\\overbrace{\\left[ \\begin{array}{rrr} 1 &amp; 0 &amp; 0 \\\\ 0 &amp; 1 &amp; 0 \\\\ 0 &amp; 0 &amp; 1 \\end{array} \\right]}^{\\textbf{I}} \\overbrace{ \\left[ \\begin{array}{rrr} 1 &amp; 2 &amp; 3 \\\\ 2 &amp; 3 &amp; 1 \\\\ -2 &amp; 3 &amp; -2 \\end{array} \\right]\\nonumber}^{\\textbf{A}}\\] Qator ustida amallar orqali $\\mathbf{A}$ matritsaning diagonalidan pastki elementlarni 0 ga aylantiramiz. Va har bir qator ustida amallar bajarish jarayonida $\\textbf{I}$ matritsasini unga teskari qator ammalarni qo’llab boramiz. $R_2 = R_2 - 2R_1$ : \\(\\quad \\left[ \\begin{array}{rrr} 1 &amp; 0 &amp; 0 \\\\ 2 &amp; 1 &amp; 0 \\\\ 0 &amp; 0 &amp; 1 \\end{array} \\right] \\left[ \\begin{array}{rrr} 1 &amp; 2 &amp; 3 \\\\ 0 &amp; -1 &amp; -5 \\\\ -2 &amp; 3 &amp; -2 \\end{array} \\right]\\nonumber\\) $R_3 = R_3 + 2 R_1$: \\(\\quad \\left[ \\begin{array}{rrr} 1 &amp; 0 &amp; 0 \\\\ 2 &amp; 1 &amp; 0 \\\\ -2 &amp; 0 &amp; 1 \\end{array} \\right] \\left[ \\begin{array}{rrr} 1 &amp; 2 &amp; 3 \\\\ 0 &amp; -1 &amp; -5 \\\\ 0 &amp; 7 &amp; 4 \\end{array} \\right]\\nonumber\\) $R_3 = R_3 + 7 R_2$: \\(\\quad \\left[ \\begin{array}{rrr} 1 &amp; 0 &amp; 0 \\\\ 2 &amp; 1 &amp; 0 \\\\ -2 &amp; -7 &amp; 1 \\end{array} \\right] \\left[ \\begin{array}{rrr} 1 &amp; 2 &amp; 3 \\\\ 0 &amp; -1 &amp; -5 \\\\ 0 &amp; 0 &amp; -31 \\end{array} \\right]\\nonumber\\) \\[\\textbf{A} = \\overbrace{\\left[ \\begin{array}{rrr} 1 &amp; 0 &amp; 0 \\\\ 2 &amp; 1 &amp; 0 \\\\ -2 &amp; -7 &amp; 1 \\end{array} \\right]}^{\\textbf{L}} \\overbrace{ \\left[ \\begin{array}{rrr} 1 &amp; 2 &amp; 3 \\\\ 0 &amp; -1 &amp; -5 \\\\ 0 &amp; 0 &amp; -31 \\end{array} \\right] }^{\\textbf{U}}\\nonumber\\] 4.4.1.2 LU Yoyish usuli orqali $\\textit{A} \\mathbf{x} =\\mathbf{b}$ yechish Agar biz $\\textbf{A} \\mathbf{x} = \\mathbf{b}$ tenglamalar tizimini yechishni istasak, biz $\\textbf{A} = \\textbf{LU}$ ni topishimiz kerak. \\[\\begin{aligned} {\\bf A x} &amp;= {\\bf b} \\\\ {\\bf L U x} &amp;= {\\bf b} \\\\ {\\bf U x} &amp;= {\\bf L}^{-1} {\\bf b} \\\\ {\\bf x} &amp;= {\\bf U}^{-1} ({\\bf L}^{-1} {\\bf b}), \\end{aligned}\\] $\\textbf{L}^{-1}\\mathbf{b}$ - to’g’ri o’rniga qo’yish (forward substitution) $\\textbf{U}^{-1}(\\textbf{L}^{-1}\\textbf{b})$ - teskari o’rniga qo’yish (backward substitution) 4.4.2 $\\textbf{QR}$ yoyish $\\textbf{QR}$ yoyish - bu matritsaning $\\textbf{Q}$ ortogonal matritsa va $\\textbf{R}$ yuqoridan uchburchak matritsa ko’rinishida yozilishi. \\[\\boxed{\\textbf{A} = \\textbf{QR}}\\] $\\textbf{QR}$ yoyishni topish uchun Gram-Shmidt jarayonini qo’llash va $\\textbf{Q}$ matritsasini topish $\\textbf{R}$ matritsasini topish \\(\\textbf{A} = \\textbf{QR} = \\Bigg[ \\mathop{\\mathbf e_1} \\limits_|^| \\ \\mathop{\\mathbf e_2} \\limits_|^| \\ \\cdots \\ \\mathop{\\mathbf e_n} \\limits_|^| \\Bigg] \\begin{bmatrix} \\mathbf{e}_1 \\cdot \\mathbf{a}_1 &amp; \\mathbf{e}_1 \\cdot \\mathbf{a}_2 &amp; \\cdots &amp; \\mathbf{e}_1 \\cdot \\mathbf{a}_n \\\\ 0 &amp; \\mathbf{e}_2 \\cdot \\mathbf{a}_2 &amp; \\cdots &amp; \\mathbf{e}_2 \\cdot \\mathbf{a}_n \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ 0 &amp; 0 &amp; \\cdots &amp; \\mathbf{e}_n \\cdot \\mathbf{a}_n \\end{bmatrix}\\) Misol: \\({\\displaystyle A={\\begin{bmatrix}1&amp;1&amp;1\\\\0 &amp; 1 &amp; 1\\\\1&amp;1&amp;0\\end{bmatrix}} }\\). \\[\\textbf{Q}={\\begin{bmatrix}{\\frac {\\mathbf {u}_{1}}{\\|\\mathbf {u}_{1}\\|}}&amp;{\\frac {\\mathbf {u}_{2}}{\\|\\mathbf {u}_{2}\\|}}&amp;{\\frac {\\mathbf {u}_{3}}{\\|\\mathbf {u}_{3}\\|}}\\end{bmatrix}} = \\begin{split} \\begin{bmatrix} 1/\\sqrt{2} &amp; 0 &amp; 1/\\sqrt{2} \\\\ 0 &amp; 1 &amp; 0 \\\\ 1/\\sqrt{2} &amp; 0 &amp; -1/\\sqrt{2} \\end{bmatrix} \\end{split}\\] \\[\\textbf{A} = \\textbf{QR} \\Rightarrow \\textbf{Q}^{\\textsf {T}}\\textbf{A}=\\textbf{Q}^{\\textsf {T}}\\textbf{Q}\\,\\textbf{R}=\\textbf{R};\\] \\[{\\displaystyle {\\begin{aligned}\\\\\\textbf{R}&amp;=\\textbf{Q}^{\\textsf {T}}\\textbf{A}={\\begin{bmatrix} \\sqrt{2} &amp; \\sqrt{2} &amp; 1/\\sqrt{2} \\\\ 0 &amp; 1 &amp; 1 \\\\ 0 &amp; 0 &amp; 1/\\sqrt{2} \\end{bmatrix}}.\\end{aligned}}}\\] import numpy as np A = np.array([[1, 1, 1], [0, 1, 1], [1, 1, 0]]) Q, R = np.linalg.qr(A) print(Q) print(R) 4.4.3 $\\textit{Eigen}$ yoyish Eigen yoyish - bu $n \\times n$ kvadrat matritsaning eigen-qiymatlar va eigen-vektorlar bilan yoyish usuli. \\[\\boxed{\\displaystyle \\mathbf {A} =\\mathbf {X} \\mathbf {\\Lambda } \\mathbf {X} ^{-1}}\\] $\\mathbf {X}$ - ustunlari eigen-vektorlardan hosil bo’lgan matritsa $\\mathbf {\\Lambda }$ - diagonal matritsa, diagonal elementlari eigen-qiymatlar Eigen yoyishni topish uchun: Eigen-qiymatlar $\\lambda_1, \\lambda_2, …, \\lambda_n$ va eigen-vektorlar $\\mathbf{v}_1, \\mathbf{v}_2, …, \\mathbf{v}_n$ topiladi $\\mathbf {X}$ va $\\mathbf {\\Lambda }$ matritsalarni topish \\[\\textbf{A} = \\textbf{X} \\mathbf{\\Lambda} \\textbf{X}^{-1} = \\Bigg[ \\mathop{\\mathbf v_1} \\limits_|^| \\ \\mathop{\\mathbf v_2} \\limits_|^| \\ \\cdots \\ \\mathop{\\mathbf v_n} \\limits_|^| \\Bigg] \\begin{bmatrix} \\lambda_1 &amp; 0 &amp; \\cdots &amp; 0 \\\\ 0 &amp; \\lambda_2 &amp; \\cdots &amp; 0 \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ 0 &amp; 0 &amp; \\cdots &amp; \\lambda_n \\end{bmatrix}\\Bigg[ \\mathop{\\mathbf v_1} \\limits_|^| \\ \\mathop{\\mathbf v_2} \\limits_|^| \\ \\cdots \\ \\mathop{\\mathbf v_n} \\limits_|^| \\Bigg] ^{-1}\\] Qulaylik: $\\mathbf {A }^k = \\mathbf {X} \\mathbf {\\Lambda }^k \\mathbf {X} ^{-1}$ Misol: \\({\\displaystyle \\mathbf {A} ={\\begin{bmatrix}1&amp;2\\\\2&amp;1\\end{bmatrix}}}\\). Uning eigen yoyilishini toping. Eigen-qiymatlar: $\\lambda_1 = 3, \\lambda_2 = -1$ va eigen-vektorlar: \\(\\mathbf{v}_1 = \\begin{bmatrix} 1 \\\\ 1 \\end{bmatrix}, \\mathbf{v}_2 = \\begin{bmatrix} -1 \\\\ 1 \\end{bmatrix}\\) \\({\\displaystyle \\mathbf {X} ={\\begin{bmatrix}1&amp;-1\\\\1&amp;1\\end{bmatrix}}}\\) va \\({\\displaystyle \\mathbf {\\Lambda }={\\begin{bmatrix}3&amp;0\\\\0&amp;-1\\end{bmatrix}}}\\) 4.4.4 $\\textbf{SVD}$ yoyish \\[\\boxed{\\displaystyle \\mathbf {A} =\\mathbf {U\\Sigma V^{T}}}\\] Eigen yoyish faqat $n \\times n$ matritsalarda ishlaydi. Singulyar yoyish esa $m \\times n$ matritsalar uchun ishlaydi. Singulyar qiymat - bu $\\textbf{A}^T \\textbf{A}$ va $\\textbf{A} \\textbf{A}^T$ matritsalarning eigen-qiymatlari. $\\lambda_1 \\geq \\lambda_2 \\geq … \\geq \\lambda_r \\geq 0$ $\\sigma_i = \\sqrt{\\lambda_i}$ - singulyar qiymatlar \\[\\boxed{\\displaystyle \\mathbf {A} =\\mathbf {U\\Sigma V^{T}}}\\] $\\mathbf {U}$ - $m \\times m$ ortogonal matritsa: ustunlari $\\textbf{A}\\textbf{A}^T$ matritsaning eigen-vektorlaridan tashkil topkan $\\mathbf {V}$ - $n \\times n$ ortogonal matritsa: ustunlari $\\textbf{A}^T \\textbf{A}$ matritsaning eigen-vektorlaridan tashkil topkan $\\mathbf {\\Sigma}$ - $m \\times n$ diagonal elementlari singulyar qiymatlar iborat diagonal matritsa \\[\\boxed{\\displaystyle \\mathbf {A} =\\mathbf {U\\Sigma V^{T}}}\\] \\[\\textbf{A} = \\mathbf {U\\Sigma V^{T}} = \\Bigg[ \\mathop{\\mathbf u_1} \\limits_|^| \\ \\mathop{\\mathbf u_2} \\limits_|^| \\ \\cdots \\ \\mathop{\\mathbf u_m} \\limits_|^| \\Bigg] \\left[\\begin{array}{ccc|c} \\sigma_1 &amp; &amp; &amp; \\\\ &amp; \\ddots &amp; &amp; \\boldsymbol{0} \\\\ &amp; &amp; \\sigma_r &amp; \\\\ \\hline &amp; \\boldsymbol{0} &amp; &amp; \\boldsymbol{0} \\end{array} \\right]_{m \\times n} \\Bigg[ \\mathop{\\mathbf v_1} \\limits_|^| \\ \\mathop{\\mathbf v_2} \\limits_|^| \\ \\cdots \\ \\mathop{\\mathbf v_n} \\limits_|^| \\Bigg] ^{T}\\] $\\mathbf{u}_i$ va $\\mathbf{v}_i$ orasidagi bog’liqlik: $\\mathbf{A}^T \\mathbf{u}_i = \\sigma_i \\mathbf{v}_i$ $\\mathbf{A} \\mathbf{v}_i = \\sigma_i \\mathbf{u}_i$ Singulyar yoyishni topish uchun: $\\textbf{A}^T \\textbf{A}$ eigen-qiymatlari va eigen-vektorlar topish $\\mathbf{\\Sigma}$ matritsasini singulyar qiymatlari bilan to’ldirish $\\textbf{V}$ ni normallashtirilgan eigen-vektorlar bilan to’ldirish $\\textbf{u}_i = \\frac{1}{\\sigma_i}\\textbf{A}\\mathbf{v}_i$ orqali $r$ vektor toping. $\\mathbb{R}^m$ fazoga Gram-Shmit yoki boshqa yo’l bilan $r$ vektorlarni $m$ ortonormal bazislarga kengaytiring, va $\\textbf{U}$ matritsaning shakllantiring Misol \\({\\displaystyle \\mathbf {A} ={\\begin{bmatrix} 1 &amp; 1 \\\\ 1 &amp; -1 \\\\ 0 &amp; 1 \\end{bmatrix}}}\\). Uning singulyar yoyilishini toping. $\\textbf{A}^T \\textbf{A}$ = ${\\displaystyle {\\begin{bmatrix} 2 &amp; 0 \\ 0 &amp; 3 \\end{bmatrix}}}$ eigen-qiymatlar: $\\lambda_1 \\geq \\lambda_2$, $\\lambda_1 = 3, \\lambda_2 = 2$ eigen-vektorlar (normallashtirilgan): $\\mathbf{v}_1 = \\begin{bmatrix} 0 \\ 1 \\end{bmatrix}, \\mathbf{v}_2 = \\begin{bmatrix} 1 \\ 0 \\end{bmatrix}$ singulyar qiymatlar: $\\sigma_1 = \\sqrt{3}, \\sigma_2 = \\sqrt{2}$ \\[\\mathbf{\\Sigma} = {\\displaystyle {\\begin{bmatrix} \\sqrt{3} &amp; 0 \\\\ 0 &amp; \\sqrt{2} \\\\ 0 &amp; 0\\end{bmatrix}}}\\] \\[\\textbf{V} = {\\displaystyle {\\begin{bmatrix} 0 &amp; 1 \\\\ 1 &amp; 0 \\end{bmatrix}}}\\] \\[\\begin{split} \\textbf{u}_1 = \\frac{1}{\\sigma_1} A\\textbf{v}_1 = \\frac{1}{\\sqrt{3}} \\left[ \\begin{array}{r} 1 \\\\ -1 \\\\ 1 \\end{array} \\right] \\hspace{5mm} \\textbf{u}_2 = \\frac{1}{\\sigma_2} A\\textbf{v}_2 = \\frac{1}{\\sqrt{2}} \\left[ \\begin{array}{r} 1 \\\\ 1 \\\\ 0 \\end{array} \\right] \\end{split}\\] $\\mathbf{u}_3$ ni aniqlash uchun biz, quyidagi shartlarni bajarish kerak: $\\mathbf{u}_1$ va $\\mathbf{u}_2$ ga ortogonal bo’lishi kerak ${\\mathbf{u}_1, \\mathbf{u}_2, \\mathbf{u}_3 }$ vektor to’plamlari $\\mathbb{R}^3$ ga bazis ortonolmal bo’lishi kerak. Buni amalga oshirish uchun biz $\\mathbf{u}_1 \\cdot \\mathbf{u}_3 = 0$ va $\\mathbf{u}_2 \\cdot \\mathbf{u}_3 = 0$ tenglamalardan tashkil topgan chiziqli tenglamalar sistemasini tuzamiz: \\(\\begin{split} \\left[ \\begin{array}{rrr|r} 1 &amp; -1 &amp; \\phantom{+}1 &amp; 0 \\\\ 1 &amp; 1 &amp; 0 &amp; 0 \\end{array} \\right] \\hspace{5mm} \\Rightarrow \\hspace{5mm} \\textbf{u}_3 = \\frac{1}{\\sqrt{6}} \\left[ \\begin{array}{r} -1 \\\\ 1 \\\\ 2 \\end{array} \\right] \\end{split}\\) Natija: \\[\\begin{split} \\mathbf A = \\mathbf U \\Sigma \\mathbf {V}^T = \\left[ \\begin{array}{rcr} 1/\\sqrt{3} &amp; 1/\\sqrt{2} &amp; -1/\\sqrt{6} \\\\ -1/\\sqrt{3} &amp; 1/\\sqrt{2} &amp; 1/\\sqrt{6} \\\\ 1/\\sqrt{3} &amp; 0 &amp; 2/\\sqrt{6} \\end{array} \\right] \\left[ \\begin{array}{rr} \\sqrt{3} &amp; 0 \\\\ 0 &amp; \\sqrt{2} \\\\ 0 &amp; 0 \\end{array} \\right] \\begin{bmatrix} 0 &amp; 1 \\\\ 1 &amp; 0 \\end{bmatrix}^T \\end{split}\\] import numpy as np A = np.array([[1, 1], [1, -1], [0, 1]]) U, S, VT = np.linalg.svd(A) print(\"U:\\n\", U) print(\"S:\\n\", S) print(\"VT:\\n\", VT)"
  },"/chiziqli-algebra/jekyll/2025-02-28-fazo.html": {
    "title": "Modul 4. Vektor Fazolari va Ortogonalizatsiya",
    "keywords": "Jekyll",
    "url": "/chiziqli-algebra/jekyll/2025-02-28-fazo.html",
    "body": "4.1 Vektor fazolari, subfazolar va chiziqli qobiqlar 4.1.1 Vektor fazo va subfazolar Tasavvur qiling, butun koinot sizning o’yin maydoningiz va vektorlar kosmik raketalarga o’xshaydi. Vektor fazosi barcha raketalar (vektorlar) amal qilishi kerak bo’lgan maxsus qoidalarga ega galaktikaga deb tasavvur qilsak bo’ladi. Har bir raketa o’zining: yo’nalishi (masalan, qaysi tomonga uchayotgani) tezligi (uning dvigatellari qanchalik kuchli ekanligi) ega bo’ladi. Vektor fazo esa raketalar o’zaro qanday munosabatda bo’lishi va bir-biriga qanday ta’sir qilishini belgilovchi qoidalardan iborat: Vektorlar qo’shilishi: Agar siz ikkita raketani bir-biriga bog’lasangiz, ularning tezligi va yo’nalishlari qanday o’zgaradi? Vektorlarni skalar songa ko’paytirish: Agar siz raketani kuchli dvigatel bilan jihozlasangiz, u qanday tezlikka ega bo’ladi? … Vektor fazo bo’sh bo’lmagan vektor to’plami $V$ bo’lib, u quyidagi shartlarni qanoatlantirsa, $V$ vektor fazosi deyiladi: $V$ to’plamida nol vektori mavjud. $V$ to’plamida har qanday $\\mathbf{u}, \\mathbf{v} \\in V$ vektorlar uchun $\\mathbf{u} + \\mathbf{v} \\in V$. $V$ to’plamida har qanday $\\mathbf{u} \\in V$ vektori va har qanday $c \\in \\mathbb{R}$ skalar uchun $c\\mathbf{u} \\in V$. $V$ to’plamida har qanday $\\mathbf{u}, \\mathbf{v} \\in V$ vektorlar uchun $\\mathbf{u} + \\mathbf{v} = \\mathbf{v} + \\mathbf{u}$. $V$ to’plamida har qanday $\\mathbf{u}, \\mathbf{v}, \\mathbf{w} \\in V$ vektorlar uchun $(\\mathbf{u} + \\mathbf{v}) + \\mathbf{w} = \\mathbf{u} + (\\mathbf{v} + \\mathbf{w})$ $V$ to’plamida har qanday $\\mathbf{u} \\in V$ vektori uchun $\\mathbf{u} + (-\\mathbf{u}) = \\mathbf{0}$. $V$ to’plamida har qanday $\\mathbf{u} \\in V$ vektori va har qanday $c, d \\in \\mathbb{R}$ skalarlar uchun $c(d\\mathbf{u}) = (cd)\\mathbf{u}$. $V$ to’plamida har qanday $\\mathbf{u} \\in V$ vektori va har qanday $c, d \\in \\mathbb{R}$ skalarlar uchun $(c + d)\\mathbf{u} = c\\mathbf{u} + d\\mathbf{u}$. Misollar: $\\mathbb{R}^2$ - ikki o’lchovli fazo $\\mathbb{R}^3$ - uch o’lchovli fazo $\\mathbb{R}^n$ - $n$ o’lchovli fazo Vektor subfazosi $\\mathbf{V}$ fazosining kichik to’plami $\\mathbf{U}$ - vektor subfazo deb hisoblanadi, agar ushbu qoidalar qanoatlantirilsa: $\\mathbf{0} \\in \\mathbf{U}$ $\\mathbf{u} + \\mathbf{v} \\in \\mathbf{U}$ $\\alpha \\mathbf{u} \\in \\mathbf{U}$ Misol: $\\mathbb{R}^2$ fazosining subfazosi - $x$ o’qidagi barcha vektorlar to’plami. $\\mathbb{R}^3$ fazosining subfazosi - $x$ va $y$ o’qlaridagi barcha vektorlar to’plami. 4.1.2 Chiziqli qobiq Tasavvur qiling, endi siz raketalar flotiga (vektorlar) qo’mondonlik qilayotgan kosmik admiralsiz. Sizning flotingiz masofasi - bu ularning kuchlarini birlashtirib (ularni masshtablash va qo’shish) erishishingiz mumkin bo’lgan barcha joylar. Chiziqli qobiq (Linear Span) Agar $\\mathbf{v_1}, \\mathbf{v_2}, \\ldots, \\mathbf{v_n}$ vektorlar to’plami berilgan bo’lsa, ularning chiziqli qobi $L(\\mathbf{v_1}, \\mathbf{v_2}, \\ldots, \\mathbf{v_n})$ deb ataladi va quyidagi ko’rinishda ifodalanadi: \\(\\boxed{\\text{span}(\\mathbf{v}_1, \\mathbf{v}_2, ..., \\mathbf{v}_n) = \\{ \\alpha_1 \\mathbf{v}_1 + \\alpha_2 \\mathbf{v}_2 + ... + \\alpha_n \\mathbf{v}_n | \\alpha_i \\in \\mathbb{R} \\}}\\) Misollar: $\\text{span}(\\begin{bmatrix} 1 \\ 0 \\end{bmatrix}, \\begin{bmatrix} 0 \\ 1 \\end{bmatrix})$ - $\\mathbb{R}^2$ vektor fazosini tashkil etadi $\\text{span}(\\begin{bmatrix} 1 \\ 2 \\ 3 \\end{bmatrix}, \\begin{bmatrix} 0 \\ 1 \\ 2 \\end{bmatrix}, \\begin{bmatrix} -1\\ 1/2 \\ 3 \\end{bmatrix}, \\begin{bmatrix} 1 \\ 1 \\ 1 \\end{bmatrix})$ - $\\mathbb{R}^3$ vektor fazosini tashkil etadi 4.1.3 Bazis (Basis) Tasavvur qiling, siz galaktika tadqiqotchisisiz va kosmik kemangizning navigatsiya tizimi raketa vektorlarida ishlaydi. Bazis bu sizning koinotning istalgan nuqtasiga (vektor fazosi) ortiqcha raketalarsiz yetib olishingiz uchun kerak bo’lgan eng kichik raketalar to’plamidir. Bazis (Basis) bu vektorlar to’plami $\\mathbf{v_1}, \\mathbf{v_2}, …, \\mathbf{v_n}$, va $\\mathbf{V}$ vektor fazosini tashkil etadi, agar: $\\text{span}(\\mathbf{v}_1, \\mathbf{v}_2, …, \\mathbf{v}_n) = \\mathbf{V}$ $\\mathbf{v}_1, \\mathbf{v}_2, …, \\mathbf{v}_n$ o’zaro bog’liq emas Misollar: $\\text{span}(\\begin{bmatrix} 1 \\ 2 \\ 3 \\end{bmatrix}, \\begin{bmatrix} 0 \\ 1 \\ 2 \\end{bmatrix}, \\begin{bmatrix} -1\\ 1/2 \\ 3 \\end{bmatrix}, \\begin{bmatrix} 1 \\ 1 \\ 1 \\end{bmatrix})$ - $\\mathbb{R}^3$ vektor fazosini tashkil etadi lekin bu bazis emas, chunki ular o’zaro bog’liq $\\text{span}(\\begin{bmatrix} 1 \\ 0 \\ 0 \\end{bmatrix}, \\begin{bmatrix} 0 \\ 1 \\ 0 \\end{bmatrix}, \\begin{bmatrix} 0 \\ 0 \\ 1 \\end{bmatrix})$ - $\\mathbb{R}^3$ vektor fazosini tashkil etadi va bu bazis 4.1.4 Matritsa rangi (Rank of Matrix) Tasavvur qiling, siz raketalar flotiga (vektorlarga) ega bo’lgan galaktika qo’mondonisiz, lekin ba’zilari ortiqcha - ular sizning arsenalingizga yangi yo’nalishlarni qo’shmaydi. Matritsaning rangi sizning flotingizda qancha noyob raketa borligini ko’rsatadi. Matritsa rangi (Rank of Matrix) bu ustunlaridan hosil bo’lgan vektor fazosining o’lchami. Ya’ni, chiziqli bog’liq bo’lmagan barcha matritsaning ustunlar soni. \\(\\boxed{\\text{rank}(\\mathbf{A}) = \\text{dim}(\\text{span}(\\mathbf{A}))}\\) Qanday aniqlaymiz? \\[{\\displaystyle {\\begin{aligned}{\\begin{bmatrix}1&amp;2&amp;1\\\\-2&amp;-3&amp;1\\\\3&amp;5&amp;0\\end{bmatrix}}&amp;\\xrightarrow {2R_{1}+R_{2}\\to R_{2}} {\\begin{bmatrix}1&amp;2&amp;1\\\\0&amp;1&amp;3\\\\3&amp;5&amp;0\\end{bmatrix}}\\xrightarrow {-3R_{1}+R_{3}\\to R_{3}} {\\begin{bmatrix}1&amp;2&amp;1\\\\0&amp;1&amp;3\\\\0&amp;-1&amp;-3\\end{bmatrix}}\\\\&amp;\\xrightarrow {R_{2}+R_{3}\\to R_{3}} \\,\\,{\\begin{bmatrix}1&amp;2&amp;1\\\\0&amp;1&amp;3\\\\0&amp;0&amp;0\\end{bmatrix}}\\xrightarrow {-2R_{2}+R_{1}\\to R_{1}} {\\begin{bmatrix}1&amp;0&amp;-5\\\\0&amp;1&amp;3\\\\0&amp;0&amp;0\\end{bmatrix}}~.\\end{aligned}}}\\] Natijada, \\(\\text{rank}(\\textbf{A}) = 2\\). 4.1.5 Ustun fazo va Nol fazo (Column space and Null Space) Ustun fazo: $\\text{Col}(\\textbf{A}) = \\text{span}(\\textbf{a}_1, \\textbf{a}_2, …, \\textbf{a}_n)$ $\\textbf{A}$ matritsaning ustunlar qobig’i. Ustun fazo $\\textbf{Ax}$ ko’paytirish orqali erishish mumkin bo’lgan barcha vektorlarni ifodalaydi Nol fazo: $\\text{Null}(\\textbf{A}) = { \\mathbf{x} \\in \\mathbb{R}^n | \\textbf{A} \\mathbf{x} = \\mathbf{0} }$ Nol fazo $\\textbf{A}$ matritsaga ko’paytirilganda $\\mathbf{0}$ ga aylanadigan barcha vektorlarni ifodalaydi 4.2 Ortogonalizatsiya va Proeksiya (Orthogonalization and Projection) 4.2.1 Ortogonallik Ortogonallik Agar $\\mathbf{u}$ va $\\mathbf{v}$ vektorlarining skalar ko’paytmasi $0$ ga teng bo’lsa, u holda $\\mathbf{u}$ va $\\mathbf{v}$ vektorlar ortogonal (perpendikulyar) deb ataladi. \\(\\mathbf{u} \\cdot \\mathbf{v} = 0\\) Misol: $\\mathbf{u} = \\begin{bmatrix} 1 \\ 2 \\end{bmatrix}$ va $\\mathbf{v} = \\begin{bmatrix} -2 \\ 1 \\end{bmatrix}$ ortogonal vektorlar \\[\\mathbf{u} \\cdot \\mathbf{v} = 1 \\times -2 + 2 \\times 1 = 0\\] 4.2.2 Proeksiya Proeksiya bu vektor fazo $\\mathbf{V}$ dan o’ziga bo’lgan chiziqli transformatsiya $\\mathbf{P}$ hisoblanadi, ya’ni: $\\mathbf{P}: \\mathbb{V} \\to \\mathbb{V}$, va $\\mathbf{P}^2 = \\mathbf{P}$. 4.2.2.1 Vektorning o’qdagi Proeksiyasi (Projection onto line) Proeksiya $\\mathbf{b}$ vektorining $\\mathbf{a}$ vektordagi “soyasini” ko’rsatadi . $\\mathbf{p}$ - $\\mathbf{b}$ vektorining $\\mathbf{a}$ vektorga proeksiyasi $\\mathbf{e}$ - proeksiya xatosi (xato minimum bo’lishi uchun $\\mathbf{e} \\perp \\mathbf{a}$) $\\mathbf{e} = \\mathbf{b} - \\mathbf{p} = \\mathbf{b} - \\beta ~ \\mathbf{a}$ Maqsad: $\\beta$ ni topish $\\mathbf{e} \\perp \\mathbf{a}$, shunda $\\mathbf{a} \\cdot \\mathbf{e} = 0 \\Rightarrow \\mathbf{a}^T (\\mathbf{b} - \\beta ~ \\mathbf{a}) = 0$ \\(\\boxed{\\beta = \\frac{\\mathbf{a}^T \\mathbf{b}}{\\mathbf{a}^T \\mathbf{a}}}\\) Lekin, $\\beta = \\frac{| \\mathbf{p} |}{| \\mathbf{a} |} = \\frac{\\mathbf{a} \\cdot \\mathbf{b}}{| \\mathbf{a} |^2}$ uzunlik Biz $\\mathbf{p}$ vektorni topishimiz kerak Shunchaki $\\beta$ ni $\\mathbf{a}$ vektorga ko’paytirish kerak: \\({\\displaystyle \\operatorname {proj} _{\\mathbf {a} }\\mathbf {b} = \\beta~ \\mathbf{a} = {\\frac {\\mathbf {a} \\cdot \\mathbf {b} }{\\left\\|\\mathbf {a} \\right\\|^{2}}}{\\mathbf {a} }={\\frac {\\mathbf {a} ^T \\mathbf {b} }{\\mathbf {a} ^T \\mathbf {a} }}{\\mathbf {a} }~.}\\) import numpy as np a = np.array([[0.5], [-2.], [1.5], [-3.], [1.], [0.5]]) b = np.array([[1.], [2.], [3.], [4.], [5.], [6.]]) proj_v = (np.dot(a.T, b) / np.dot(b.T, b)) * b print(proj_v) 4.2.2.2 Proeksiya matritsasi (Projection Matrix) Berilgan $\\displaystyle \\operatorname {proj} _{\\mathbf {b} }\\mathbf {a}={\\frac {\\mathbf {a} ^T \\mathbf {b} }{\\mathbf {b} ^T \\mathbf {b} }}~{\\mathbf {b} } = {\\mathbf {b} }~ {\\frac {\\mathbf {b} ^T \\mathbf {a} }{\\mathbf {b} ^T \\mathbf {b} }}$. Lekin biz buni matritsa yordamida ifodalamoqchimiz: \\(\\boxed{\\textbf{p}=\\textbf{Pb}}\\) \\({\\displaystyle \\operatorname {proj} _{\\mathbf {b} }\\mathbf {a}= \\mathbf {b} {\\frac {\\mathbf {b} ^T \\mathbf {a} }{\\mathbf {b} ^T \\mathbf {b} }}} = {\\frac {\\mathbf {b} \\mathbf {b}^T }{\\mathbf {b} ^T \\mathbf {b} }}~{\\mathbf {a} }\\) Biz proeksiya matritsasini olamiz: \\(\\textbf{P} = \\frac {\\mathbf {b} \\mathbf {b}^T }{\\mathbf {b} ^T \\mathbf {b} }\\) Xossalari: $ \\textbf{P}^T = \\textbf{P}$ $\\textbf{P}^2 = \\textbf{P}$ import numpy as np a = np.array([[1], [2], [3]]) b = np.array([[4], [5], [6]]) P = np.dot(b, b.T) / np.dot(b.T, b) print(P) print(P @ P) proj_v = np.dot(P, a) print(proj_v) 4.2.2.3 Vektorning subfazoga proeksiyasi (Projection onto subspace) Faraz qilaylik, $\\mathbf{A}\\mathbf{x} = \\mathbf{b}$ yechimi yo’q. $\\mathbf{b} \\notin \\text{Col}(\\mathbf{A})$ - $\\mathbf{b}$ vektori $\\mathbf{A}$ ustunlar qobig’ida emas lekin, $\\mathbf{b}$ vektorini proeksiya orqali ustun fazosiga $\\text{Col}(\\mathbf{A})$ o’tkazish mumkin $\\text{Col}(\\mathbf{A})$ ustun fazosi giper-tekislikni (hyperplane) hosil qiladi. $\\mathbf{b}$ vektorini giper-tekislikga proeksiya qilish kerak Misol: Tekislikka proeksiya $\\mathbb{R}^3 \\rightarrow \\mathbb{R}^2$ Faraz qilamiz, $\\text{dim}(\\text{Col}(\\mathbf{A})) = 2$, ya’ni bazis $\\mathbf{a_1}, \\mathbf{a_2}$ vektorlar to’plami: $\\textbf{A} = \\Bigg[ \\ \\mathop{\\mathbf a_1}\\limits_|^| \\ \\mathop{\\mathbf a_2}\\limits_|^| \\ \\Bigg]$ $\\mathbf{p} = \\hat x_1 ~ \\mathbf{a}_1 + \\hat x_2 ~ \\mathbf{a}_2 \\Rightarrow \\mathbf{p} = \\textbf{A} \\mathbf{\\hat x}$ Maqsad: $\\mathbf{\\hat x}$ ni topish $\\mathbf{p} = \\textbf{A} \\mathbf{\\hat x}$ $\\mathbf{e} = \\mathbf{b} - \\mathbf{p} = \\mathbf{b} - \\textbf{A} \\mathbf{\\hat x}$ $\\mathbf{e} \\perp \\text{Col}(\\mathbf{A})$ - $\\mathbf{e} \\perp \\mathbf{a}_1$ va $\\mathbf{e} \\perp \\mathbf{a}_2$ $\\mathbf{a}_1^T \\mathbf{e} = \\mathbf{a}_1^T (\\mathbf{b} - \\textbf{A} \\mathbf{\\hat x}) = 0$ $\\mathbf{a}_2^T \\mathbf{e} = \\mathbf{a}_2^T (\\mathbf{b} - \\textbf{A} \\mathbf{\\hat x}) = 0$ Matritsa ko’rinishida: \\(\\textbf{A}^T (\\mathbf{b} - \\textbf{A} \\mathbf{\\hat x}) = 0\\) $ \\mathbf{\\hat x} $ topish kerak: \\(\\textbf{A}^T (\\mathbf{b} - \\textbf{A} \\mathbf{\\hat x}) = 0\\) \\(\\textbf{A}^T \\textbf{b} - \\textbf{A}^T \\textbf{A} \\mathbf{\\hat x} = 0\\) \\(\\textbf{A}^T \\textbf{A} \\mathbf{\\hat x} = \\textbf{A}^T \\textbf{b}\\) \\(\\boxed{\\mathbf{\\hat x} = (\\textbf{A}^T \\textbf{A})^{-1} \\textbf{A}^T \\textbf{b}}\\) Lekin, $\\mathbf{\\hat x}$ bu koeffitsientlar to’plami, proeksiya esa: \\(\\mathbf{p} = \\textbf{A} \\mathbf{\\hat x} = \\textbf{A} (\\textbf{A}^T \\textbf{A})^{-1} \\textbf{A}^T \\textbf{b}\\) $\\textbf{P} = \\textbf{A} (\\textbf{A}^T \\textbf{A})^{-1} \\textbf{A}^T$ - proeksiya matritsasi 4.3 Ortonormal bazis va Gram-Shmit jarayoni 4.3.1 Ortonormal bazis (Orthonormal basis) ${\\textbf{q}_1, \\textbf{q}_2, … \\textbf{q}_n }$ vektorlar to’plami ortonormal hisoblanadi, agar: \\[\\textbf{q}_i^T \\textbf{q}_j= \\begin{cases} 0, &amp; \\text{qachonki} &amp; i\\ne j &amp; \\text{ortogonal vektor}\\\\ 1, &amp; \\text{when} &amp; i = j &amp; \\text{birlik vektor} \\end{cases}\\] Matritsa ko’rinishida: $Q = \\Bigg[ \\mathop{\\mathbf q_1}\\limits_ ^ \\ \\mathop{\\mathbf q_2}\\limits_ ^ \\ \\cdots \\ \\mathop{\\mathbf q_n}\\limits_ ^ \\Bigg]$ $Q$ - ortonormal matritsa deb ataladi $\\textit{Q}^T \\textit{Q}= \\textit{I}$ $\\textit{Q}^T = \\textit{Q}^{-1}$ 4.3.2 Ortogonal bazisga proeksiya (Projection onto orthogonal basis) Faraz qilaylik, $Q = \\Bigg[ \\mathop{\\mathbf q_1}\\limits_|^| \\ \\mathop{\\mathbf q_2}\\limits_|^| \\ \\cdots \\ \\mathop{\\mathbf q_n}\\limits_|^| \\Bigg]$ ortonormal bazis bo’lsin. Biz $\\mathbf{b}$ vektorini bu bazisga proeksiya qilishimiz kerak. $\\text{Col}(Q)$ - $\\mathbf{b}$ vektorini proeksiya qilish uchun kerak bo’lgan fazo odatda, proeksiya matritsasi $\\textbf{P} = \\textbf{A} (\\textbf{A}^T \\textbf{A})^{-1} \\textbf{A}^T$ ko’rinishida topiladi ortogonal bazis uchun proeksiya matritsasi $\\textbf{P} = \\textbf{Q} (\\textbf{Q}^T \\textbf{Q})^{-1} \\textbf{Q}^T = \\textbf{Q} \\textbf{Q}^T$ \\[\\boxed{\\textbf{P} = \\textbf{Q} \\textbf{Q}^T}\\] import numpy as np x, y = np.array([[3],[4],[0]]), np.array([[-4],[3],[2]]) print(x.T @ y) # euclidean norm of x and y x_norm = np.linalg.norm(x, 2) y_norm = np.linalg.norm(y, 2) # normalized x or unit vector x_unit = x * (1/x_norm) y_unit = y * (1/y_norm) print(f'Euclidean norm of x:\\n{x_norm}\\n') print(f'Euclidean norm of y:\\n{y_norm}\\n') print(f'Normalized x:\\n{x_unit}\\n') print(f'Normalized y:\\n{y_unit}') print(np.round(np.linalg.norm(x_unit, 2),1), np.round(np.linalg.norm(y_unit, 2),1)) print(np.round(x_unit.T @ y_unit,1), np.round(x_unit.T @ x_unit,1), np.round(y_unit.T @ y_unit,1)) Q = np.column_stack((x_unit, y_unit)) print(Q) print(np.round(Q.T @ Q,1)) 4.3.3 Gram-Shmit jarayoni (Gram-Schmidt process) Gram-Shmidt jarayoni - bu vektorlar to’plamini ortonormal bazisga aylantirish usuli. chiziqli bog’liq bo’lmagan vektorlar to’plamini qabul qiladi: ${\\displaystyle S={\\mathbf {v} _{1},\\ldots ,\\mathbf {v} _{k}}}$, $k ≤ n$ ortonormal bazis ${\\displaystyle S’={\\mathbf {u} _{1},\\ldots ,\\mathbf {u} _{k}}}$ hosil qiladi \\[{\\displaystyle {\\begin{aligned}\\mathbf {u} _{1}&amp;=\\mathbf {v} _{1},&amp;\\!\\mathbf {e} _{1}&amp;={\\frac {\\mathbf {u} _{1}}{\\|\\mathbf {u} _{1}\\|}}\\\\\\mathbf {u} _{2}&amp;=\\mathbf {v} _{2}-\\operatorname {proj} _{\\mathbf {u} _{1}}(\\mathbf {v} _{2}),&amp;\\!\\mathbf {e} _{2}&amp;={\\frac {\\mathbf {u} _{2}}{\\|\\mathbf {u} _{2}\\|}}\\\\\\mathbf {u} _{3}&amp;=\\mathbf {v} _{3}-\\operatorname {proj} _{\\mathbf {u} _{1}}(\\mathbf {v} _{3})-\\operatorname {proj} _{\\mathbf {u} _{2}}(\\mathbf {v} _{3}),&amp;\\!\\mathbf {e} _{3}&amp;={\\frac {\\mathbf {u} _{3}}{\\|\\mathbf {u} _{3}\\|}}\\\\\\mathbf \\ \\vdots &amp;&amp;{}\\ \\ \\vdots \\\\\\mathbf {u} _{k}&amp;=\\mathbf {v} _{k}-\\sum _{j=1}^{k-1}\\operatorname {proj} _{\\mathbf {u} _{j}}(\\mathbf {v} _{k}),&amp;\\!\\mathbf {e} _{k}&amp;={\\frac {\\mathbf {u} _{k}}{\\|\\mathbf {u} _{k}\\|}}.\\end{aligned}}}\\] import numpy as np A = np.array([[2, 1, -2], [7, -3, 1], [-3, 5, -1]]) print(A.T @ A) # Gram-Schmidt jarayoni u1 = A[:, 0] e1 = u1 / np.linalg.norm(u1) v2 = A[:, 1] u2 = v2 - ((u1.T @ v2)/(u1.T @ u1)) * u1 e2 = u2 / np.linalg.norm(u2) v3 = A[:, 2] u3 = v3 - (((u1.T @ v3)/(u1.T @ u1)) * u1) - (((u2.T @ v3)/(u2.T @ u2)) * u2) e3 = u3 / np.linalg.norm(u3) Q = np.column_stack((e1, e2, e3)) print(np.round(Q.T @ Q, 2))"
  },"/chiziqli-algebra/jekyll/2025-02-28-chiziqli-tenglamalar.html": {
    "title": "Modul 3. Transformatsiya va Chiziqli Tenglamalar",
    "keywords": "Jekyll",
    "url": "/chiziqli-algebra/jekyll/2025-02-28-chiziqli-tenglamalar.html",
    "body": "Birlik matritsa Diagonal elementlari birga teng bo’lgan (boshqa elementlari nol) kvadrat matritsa. \\(\\textit{I}_n := \\begin{bmatrix} 1 &amp; 0 &amp; \\cdots &amp; 0 &amp; 0 \\\\ 0 &amp; 1 &amp; \\cdots &amp; 0 &amp; 0 \\\\ 0 &amp; 0 &amp; \\ddots &amp; 0 &amp; 0 \\\\ 0 &amp; 0 &amp; \\cdots &amp; 1 &amp; 0 \\\\ 0 &amp; 0 &amp; \\cdots &amp; 0 &amp; 1 \\end{bmatrix} \\in \\mathbb{R}^{n \\times n}\\) Birlik matritsaga misollar: \\(\\ I_{2}={\\begin{bmatrix}1&amp;0\\\\0&amp;1\\end{bmatrix}},\\ I_{3}={\\begin{bmatrix}1&amp;0&amp;0\\\\0&amp;1&amp;0\\\\0&amp;0&amp;1\\end{bmatrix}},\\ \\dots\\) import numpy as np # Birlik Matritsa yaratish np.eye(3) Teskari matritsa Bizda $\\mathbf{A} \\in \\mathbb{R}^{n \\times n}$ matritsa bor. Unga teskari matritsa $\\mathbf{A}^{-1}$ hisoblanadi, agar unda ushbu hususiyat bo’lsa: \\[\\boxed {\\mathbf{A} \\mathbf{A}^{-1} = \\mathbf{A}^{-1} \\mathbf{A} = \\mathbf{I}}\\] import numpy as np # Teskari Matritsani hisoblash A = np.array([[-1, 1.5 ], [1, -1]]) A_inv = np.linalg.inv(A) A_inv 3.1 Chiziqli Transformatsiya Transformatsiya - bu funksiya, biror vektorni oladi va boshqa vektor qaytaradi: \\[T(\\mathbf{v}) = A\\mathbf{v}\\] Transformatsiya chiziqli hisoblanadi agar, ushbu shartlar bajarilsa: $T(\\textbf{v} + \\textbf{w}) = T(\\textbf{v}) + T(\\textbf{w})$ $T(c\\textbf{v}) = cT(\\textbf{v})$ $f(x,y)=(2x,y)$ ${\\textstyle f(\\mathbf {a} +\\mathbf {b} )=f(\\mathbf {a} )+f(\\mathbf {b} )}$ ${\\textstyle f(\\lambda \\mathbf {a} )=\\lambda f(\\mathbf {a} )}$ 3.1.1 Chiziqli Transformatsiyaga Misollar Siljish (Shear) Aks (Reflection) Siqish (Squeeze) Masshtablash (Scaling) Aylanish (Rotation) \\({\\displaystyle {\\begin{bmatrix}1&amp; m\\\\0&amp;1\\end{bmatrix}}}\\) \\({\\displaystyle {\\begin{bmatrix}-1&amp;0\\\\0&amp;1\\end{bmatrix}}}\\) \\({\\displaystyle {\\begin{bmatrix}{k}&amp;0\\\\0&amp;{\\frac {1}{k}}\\end{bmatrix}}}\\) \\({\\displaystyle {\\begin{bmatrix}{m}&amp;0\\\\0&amp;{m}\\end{bmatrix}}}\\) ${\\displaystyle {\\begin{bmatrix}\\cos (\\theta)&amp;-\\sin (\\theta)\\\\sin (\\theta)&amp;\\cos (\\theta)\\end{bmatrix}}}$ 3.1.2 Affin Transformatsiya (Affine Mapping) Affin transformatsiya 2 ta funksiyadan iborat: chiziqli transformatsiya + surish \\[\\boxed{\\displaystyle \\mathbf {y} =f(\\mathbf {x} )=\\mathbf {A}\\mathbf {x} +\\mathbf {b}}\\] $\\mathbf {A}$ - chiziqli transformatsiya matritsasi $\\mathbf{b}$ - surish vektori Matritsa shaklida yozmoqchi bo’lsak, ushbu ko’rinishda yozishimiz mumkin: \\[{\\displaystyle {\\begin{bmatrix}\\mathbf {y} \\\\1\\end{bmatrix}}=\\left[{\\begin{array}{ccc|c}&amp;\\mathbf {A}&amp;&amp;\\mathbf {b} \\\\0&amp;\\cdots &amp;0&amp;1\\end{array}}\\right]{\\begin{bmatrix}\\mathbf {x} \\\\1\\end{bmatrix}}}\\] 3.2 Chiziqli tenglamalardan iborat tizim Chiziqli tenglamalar tizimi quyidagi ko’rinishda ifodalanadi: \\[{\\displaystyle {\\begin{cases}a_{11}x_{1}+a_{12}x_{2}+\\dots +a_{1n}x_{n}=b_{1}\\\\a_{21}x_{1}+a_{22}x_{2}+\\dots +a_{2n}x_{n}=b_{2}\\\\\\vdots \\\\a_{m1}x_{1}+a_{m2}x_{2}+\\dots +a_{mn}x_{n}=b_{m},\\end{cases}}}\\] ${\\displaystyle x_{1},x_{2},\\dots ,x_{n}}$ noma’lumlar ${\\displaystyle a_{11},a_{12},\\dots ,a_{mn}}$ koeffitsientlar ${\\displaystyle b_{1},b_{2},\\dots ,b_{m}}$ konstant sonlar Matritsa ko’rinishida biz ularni quyidagicha yozsak bo’ladi: \\[\\boxed{\\mathbf {A}\\mathbf{x} = \\mathbf{b}}\\] bu yerda $\\mathbf{A}$ - matritsa, $\\mathbf{x}$ - noma’lum vektor, $\\mathbf{b}$ - javob vektori: \\[{\\displaystyle \\mathbf {A}={\\begin{bmatrix}a_{11}&amp;a_{12}&amp;\\cdots &amp;a_{1n}\\\\a_{21}&amp;a_{22}&amp;\\cdots &amp;a_{2n}\\\\\\vdots &amp;\\vdots &amp;\\ddots &amp;\\vdots \\\\a_{m1}&amp;a_{m2}&amp;\\cdots &amp;a_{mn}\\end{bmatrix}},\\quad \\mathbf {x} ={\\begin{bmatrix}x_{1}\\\\x_{2}\\\\\\vdots \\\\x_{n}\\end{bmatrix}},\\quad \\mathbf {b} ={\\begin{bmatrix}b_{1}\\\\b_{2}\\\\\\vdots \\\\b_{m}\\end{bmatrix}}.}\\] 3.2.1 Yechish 1: O’zgaruvchilarni yo’q qilish Chiziqli tenglamalar tizimini yechishning eng oddiy usuli o’zgaruvchilarni qayta-qayta yo’q qilishdir. Ushbu usulni quyidagicha ta’riflash mumkin: Birinchi tenglamada o’zgaruvchilardan birini boshqalari bilan ifodalanadi. Ushbu ifodani qolgan tenglamalarga qo’yiladi. Bu bitta kamroq tenglamali va noma’lum tenglamalar tizimini beradi. Tizim bitta chiziqli tenglamaga keltirilguncha 1 va 2-bosqichlar takrorlanadi. Oxiri hosil bo’lgan tenglama yechiladi, so’ngra butun yechim topilguncha chiqqan natijalar noma’lumlar o’rniga qo’yib boriladi. Masalan, quyidagi chiziqli tenglamalar tizimini yechamiz: \\[{\\displaystyle {\\begin{cases}x+3y-2z=5\\\\3x+5y+6z=7\\\\2x+4y+3z=8\\end{cases}}}\\] Bu yerda, biz $x$ noma’lumini boshqa noma’lumlar bilan ifodalaymiz. Misol uchun, birinchi tenglamadan $x$ ni ajratib olishimiz mumkin: \\({\\displaystyle x=5+2z-3y}\\) va ikkinchi va uchinchi tenglamalarga $x$ o’rniga olgan ifodani kiritamiz: \\[{\\displaystyle {\\begin{cases}y=3z+2\\\\y={\\tfrac {7}{2}}z+1\\end{cases}}}\\] Shunda bizda: \\[{\\displaystyle {\\begin{aligned}3z+2={\\tfrac {7}{2}}z+1\\\\\\Rightarrow z=2\\end{aligned}}}\\] va javob \\({\\displaystyle (x,y,z)=(-15,8,2)}\\) bo’ladi. 3.2.2 Yechish 2: Gauss usuli Gauss usuli - chiziqli tenglamalar tizimini yechishning klassik usuli hisoblanadi. Nemis matematigi Karl Fridrix Gauss sharafiga nomlangan. Bu o’zgaruvchilarni ketma-ket yo’q qilish usuli bo’lib, elementar transformatsiyalar yordamida tenglamalar tizimi ekvivalent uchburchak tizimga tushiriladi. So’ngra, tizimning barcha o’zgaruvchilari oxiridan boshlab ketma-ket topiladi. Misol, bizga ushbu chiziqli tenglamalar tizimi berilgan: \\[{\\displaystyle {\\begin{cases}2x+y-z=8\\\\-3x-y+2z=-11\\\\-2x+y+2z=-3\\end{cases}}}\\] Bu sistemadan koeffitsient matritsa $\\mathbf{A}$, noma’lumlar vektori $\\mathbf{x}$ va javob vektori $\\mathbf{b}$ ni ajratib olamiz: \\(\\mathbf{A} = \\begin{bmatrix} 2 &amp; 1 &amp; -1\\\\ -3 &amp; -1 &amp; 2\\\\ -2 &amp; 1 &amp; 2 \\end{bmatrix}\\), \\(\\mathbf{x} = \\begin{bmatrix} x \\\\ y \\\\ z \\end{bmatrix}\\), \\(\\mathbf{b} = \\begin{bmatrix} 8 \\\\ -11 \\\\ -3 \\end{bmatrix}\\). Shunda, chiziqli tenglamalar tizimi quyidagi ko’rinishga keltiriladi: \\[\\boxed{\\mathbf{A}\\mathbf{x} = \\mathbf{b}}\\] Endi, Gauss usuli bo’yicha biz birinchi $\\mathbf{A}$ matritsani $\\mathbf{b}$ vektori bilan kengaytirib olamiz: \\[\\begin{bmatrix} \\mathbf{A} &amp; | &amp; \\mathbf{b} \\end{bmatrix}\\] Ya’ni, quyidagi ko’rinishda: \\({\\displaystyle \\left[{\\begin{array}{rrr|r}2&amp;1&amp;-1&amp;8\\\\-3&amp;-1&amp;2&amp;-11\\\\-2&amp;1&amp;2&amp;-3\\end{array}}\\right]}\\) Shu yerda biz qator ustida amallardan foydalanib kengaytirilgan $\\mathbf{A}$ matritsani yuqoridan uchburchak matritsaga o’tkazamiz. Amallar quyidagicha: Ikki qatorning o’rnini almashtirish. Qatorni nolga teng bo’lmagan songa ko’paytirish. Bitta qatorga boshqa qatorning skalyar ko’paytmasini qo’shish. Tepadagi misolni yechsak: Tenglamalar Qator ustida amallar Kengaytirilgan Matritsa \\(\\begin{alignedat}{4}2x&amp;{}+{}&amp;y&amp;{}-{}&amp;z&amp;{}={}&amp;8&amp;\\\\-3x&amp;{}-{}&amp;y&amp;{}+{}&amp;2z&amp;{}={}&amp;-11&amp;\\\\-2x&amp;{}+{}&amp;y&amp;{}+{}&amp;2z&amp;{}={}&amp;-3&amp;\\end{alignedat}\\)   \\(\\left[{\\begin{array}{rrrr}2&amp;1&amp;-1&amp;8\\\\-3&amp;-1&amp;2&amp;-11\\\\-2&amp;1&amp;2&amp;-3\\end{array}}\\right]\\) \\(\\begin{alignedat}{4}2x&amp;{}+{}&amp;y&amp;{}-{}&amp;z&amp;{}={}&amp;8&amp;\\\\&amp;&amp;{\\tfrac {1}{2}}y&amp;{}+{}&amp;{\\tfrac {1}{2}}z&amp;{}={}&amp;1&amp;\\\\&amp;&amp;2y&amp;{}+{}&amp;z&amp;{}={}&amp;5&amp;\\end{alignedat}\\) \\({\\displaystyle {\\begin{aligned}Q_{2}+{\\tfrac {3}{2}}Q_{1}&amp;\\to Q_{2}\\\\Q_{3}+Q_{1}&amp;\\to Q_{3}\\end{aligned}}}\\) \\({\\displaystyle \\left[{\\begin{array}{rrrr}2&amp;1&amp;-1&amp;8\\\\0&amp;{\\frac {1}{2}}&amp;{\\frac {1}{2}}&amp;1\\\\0&amp;2&amp;1&amp;5\\end{array}}\\right]}\\) \\({\\displaystyle {\\begin{alignedat}{4}2x&amp;{}+{}&amp;y&amp;{}-{}&amp;z&amp;{}={}&amp;8&amp;\\\\&amp;&amp;{\\tfrac {1}{2}}y&amp;{}+{}&amp;{\\tfrac {1}{2}}z&amp;{}={}&amp;1&amp;\\\\&amp;&amp;&amp;&amp;-z&amp;{}={}&amp;1&amp;\\end{alignedat}}}\\) \\({\\displaystyle Q_{3}+-4Q_{2}\\to Q_{3}}\\) \\({\\displaystyle \\left[{\\begin{array}{rrrr}2&amp;1&amp;-1&amp;8\\\\0&amp;{\\frac {1}{2}}&amp;{\\frac {1}{2}}&amp;1\\\\0&amp;0&amp;-1&amp;1\\end{array}}\\right]}\\) \\({\\displaystyle {\\begin{alignedat}{4}2x&amp;{}+{}&amp;y&amp;&amp;&amp;{}={}7&amp;\\\\&amp;&amp;{\\tfrac {1}{2}}y&amp;&amp;&amp;{}={}{\\tfrac {3}{2}}&amp;\\\\&amp;&amp;&amp;{}-{}&amp;z&amp;{}={}1&amp;\\end{alignedat}}}\\) \\({\\displaystyle {\\begin{aligned}Q_{1}-Q_{3}&amp;\\to Q_{1}\\\\Q_{2}+{\\tfrac {1}{2}}Q_{3}&amp;\\to Q_{2}\\end{aligned}}}\\) \\({\\displaystyle \\left[{\\begin{array}{rrrr}2&amp;1&amp;0&amp;7\\\\0&amp;{\\frac {1}{2}}&amp;0&amp;{\\frac {3}{2}}\\\\0&amp;0&amp;-1&amp;1\\end{array}}\\right]}\\) \\({\\displaystyle {\\begin{alignedat}{4}2x&amp;{}+{}&amp;y&amp;\\quad &amp;&amp;{}={}&amp;7&amp;\\\\&amp;&amp;y&amp;\\quad &amp;&amp;{}={}&amp;3&amp;\\\\&amp;&amp;&amp;\\quad &amp;z&amp;{}={}&amp;-1&amp;\\end{alignedat}}}\\) \\({\\displaystyle {\\begin{aligned}2Q_{2}&amp;\\to Q_{2}\\\\-Q_{3}&amp;\\to Q_{3}\\end{aligned}}}\\) \\({\\displaystyle \\left[{\\begin{array}{rrrr}2&amp;1&amp;0&amp;7\\\\0&amp;1&amp;0&amp;3\\\\0&amp;0&amp;1&amp;-1\\end{array}}\\right]}\\) \\({\\displaystyle {\\begin{alignedat}{4}x&amp;\\quad &amp;&amp;\\quad &amp;&amp;{}={}&amp;2&amp;\\\\&amp;\\quad &amp;y&amp;\\quad &amp;&amp;{}={}&amp;3&amp;\\\\&amp;\\quad &amp;&amp;\\quad &amp;z&amp;{}={}&amp;-1&amp;\\end{alignedat}}}\\) \\({\\displaystyle {\\begin{aligned}Q_{1}-Q_{2}&amp;\\to Q_{1}\\\\ {\\tfrac {1}{2}}Q_{1}&amp;\\to Q_{1}\\end{aligned}}}\\) \\({\\displaystyle \\left[{\\begin{array}{rrrr}1&amp;0&amp;0&amp;2\\\\0&amp;1&amp;0&amp;3\\\\0&amp;0&amp;1&amp;-1\\end{array}}\\right]}\\) va javob \\({\\displaystyle (x,y,z)=(2,3,-1)}\\) bo’ladi. 3.2.3 Yechish 3: Teskari matritsa yordamida Agar biz $\\mathbf{A}$ kvadrat matritsaga teskari matritsa $\\mathbf{A}^{-1}$ ni topa olsak, chiziqli tenglamalar tizimini quyidagi ko’rinishda yechishimiz mumkin: \\[\\mathbf{A}\\mathbf{x} =\\mathbf{b},\\] \\[\\mathbf{A}^{-1}\\mathbf{A}\\bf{x} = \\mathbf{A}^{-1}\\bf{b},\\] \\[\\mathbf{I}\\bf{x} = \\mathbf{A}^{-1}\\bf{b},\\] \\[\\boxed{\\bf{x} = \\mathbf{A}^{-1}\\bf{b}}\\] Ya’ni, shunchaki $\\mathbf{A}^{-1}$ matritsasini topib, $\\mathbf{b}$ vektoriga ko’paytirib yechishimiz mumkin. import numpy as np # Chiziqli tenglamalar tizimini yechish A = np.array([ [2, 1, -1], [-3, -1, 2], [-2, 1, 2] ]) b = np.array([8, -11, -3]) # Teskari matritsa yordamida yechish x = np.linalg.inv(A).dot(b) x"
  },"/chiziqli-algebra/jekyll/2025-01-13-matritsalar.html": {
    "title": "Modul 2. Matritsa Asoslari",
    "keywords": "Jekyll",
    "url": "/chiziqli-algebra/jekyll/2025-01-13-matritsalar.html",
    "body": "Matritsa $m$ ta qator va $n$ ta ustundan tashkil topgan sonlarning ro’yxati. Matritsalar odatda kvadrat yoki oddiy qavslar bilan o’ralgan jadvallar bo’lib ular ushbu ko’rinishda yoziladi: \\(\\mathbf{A} = \\begin{bmatrix} a_{11} &amp; a_{12} &amp; \\ldots &amp; a_{1n} \\\\ a_{21} &amp; a_{22} &amp; \\ldots &amp; a_{2n} \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ a_{m1} &amp; a_{m2} &amp; \\ldots &amp; a_{mn} \\end{bmatrix}\\) yoki \\(\\mathbf{A} = \\begin{pmatrix} a_{11} &amp; a_{12} &amp; \\ldots &amp; a_{1n} \\\\ a_{21} &amp; a_{22} &amp; \\ldots &amp; a_{2n} \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ a_{m1} &amp; a_{m2} &amp; \\ldots &amp; a_{mn} \\end{pmatrix}\\) A - matritsa, $a_{ij}$ - matritsa elementlari, $i$ - qator, $j$ esa ustun raqamini ko’rsatadi. import numpy as np # Matritsa yaratish matritsa = np.array( [ [-1.1, 0.0, 3.6], [1.1, 0.0, 3.6], [1.1, 0.0, 3.6] ] ) print(\"Matritsa: \", matritsa) print(\"Matritsa o'lchami: \", matritsa.shape) print(\"1-qator, 3-chi ustunda joylashgan element: \", matrits[0, 2]) print(\"Matritsaning 2-qatori: \", matritsa[1, :]) print(\"Matritsaning 2-ustuni: \", matritsa[:, 1]) 2.1 Matritsa turlari Matritsalar ko’p turli bo’lishi mumkin. Ammo, ularning asosiy turlari quyidagilardir: 2.1.1 Kvadrat matritsa $ n \\times n $ o’lchamli matritsa. Bu matritsa qator va ustunlar soni bir xil bo’lgan matritsa. Misol uchun, \\[\\mathbf{A} = \\begin{bmatrix} 1 &amp; 2 &amp; 3 \\\\ 4 &amp; 5 &amp; 6 \\\\ 7 &amp; 8 &amp; 9 \\end{bmatrix}\\] 2.1.2 To’g’ri to’rtburchak matritsa $ m \\times n $ o’lchamli matritsa. Bu matritsa qator va ustunlar soni bir xil bo’lmagan matritsa. Misol uchun, \\[\\mathbf{A} = \\begin{bmatrix} 1 &amp; 2 &amp; 3 \\\\ 4 &amp; 5 &amp; 6 \\end{bmatrix}\\] 2.1.3 Nol matritsa Barcha elementlari nol bo’lgan matritsa. Misol uchun, \\[\\mathbf{A} = \\begin{bmatrix} 0 &amp; 0 &amp; 0 \\\\ 0 &amp; 0 &amp; 0 \\end{bmatrix}\\] 2.1.4 Diagonal matritsa Kvadrat matritsa bo’lib, diagonal elementlari nol bo’lmagan matritsa. Misol uchun, \\[\\mathbf{A} = \\begin{bmatrix} 1 &amp; 0 &amp; 0 \\\\ 0 &amp; 2 &amp; 0 \\\\ 0 &amp; 0 &amp; 3 \\end{bmatrix}\\] 2.1.5 Birlik matritsa Diagonal elementlari bir bo’lgan diagonal matritsa. Misol uchun, \\[\\mathbf{I} = \\begin{bmatrix} 1 &amp; 0 &amp; 0 \\\\ 0 &amp; 1 &amp; 0 \\\\ 0 &amp; 0 &amp; 1 \\end{bmatrix}\\] 2.1.6 Simmetrik matritsa Diagonal bo’yicha bu matritsaning elementlari simmetrik bo’lgan matritsa. Ya’ni, $a_{ij} = a_{ji}$ shartni qanoatlantiradigan matritsa. Misol uchun, \\[\\mathbf{A} = \\begin{bmatrix} 1 &amp; 2 &amp; 3 \\\\ 2 &amp; 4 &amp; 5 \\\\ 3 &amp; 5 &amp; 6 \\end{bmatrix}\\] 2.1.7 Uchburchak matritsa Uchburchak matritsalar ikki turdagi bo’lishi mumkin: Yuqoridan uchburchak matritsa Quyidan uchburchak matritsa Yuqoridan uchburchak matritsa bu diagonal elentlaridan pastki elementlari nol bo’lgan matritsa. Misol uchun, \\[\\mathbf{U} = \\begin{bmatrix} 1 &amp; 2 &amp; 3 \\\\ 0 &amp; 4 &amp; 5 \\\\ 0 &amp; 0 &amp; 6 \\end{bmatrix}\\] Quyidan uchburchak matritsa bu diagonal elentlaridan yuqori elementlari nol bo’lgan matritsa. Misol uchun, \\[\\mathbf{L} = \\begin{bmatrix} 1 &amp; 0 &amp; 0 \\\\ 2 &amp; 4 &amp; 0 \\\\ 3 &amp; 5 &amp; 6 \\end{bmatrix}\\] 2.2 Matritsa ustida amallar Chiziqli algebrada matritsalarnig ustida: qo’shish matritsani songa ko’paytirish matritsani vektorga ko’paytirish matritsani matritsaga ko’paytirish kabi amallar bajariladi. 2.2.1 Matritsalarni Qo’shish Ikkita $m \\times n$ o’lchamli matritsani (masalan, $\\mathbf{A}$ va $\\mathbf{B}$ ) bir biriga qo’shish uchun ularning mos elementlarini qo’shish kerak. \\[\\mathbf{A} + \\mathbf{B} = \\begin{bmatrix} a_{11} + b_{11} &amp; a_{12} + b_{12} &amp; \\ldots &amp; a_{1n} + b_{1n} \\\\ a_{21} + b_{21} &amp; a_{22} + b_{22} &amp; \\ldots &amp; a_{2n} + b_{2n} \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ a_{m1} + b_{m1} &amp; a_{m2} + b_{m2} &amp; \\ldots &amp; a_{mn} + b_{mn} \\end{bmatrix}\\] Misol uchun, ikkita matritsaning qo’shish amali quyidagicha: agar \\(\\mathbf{A} = \\begin{bmatrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\end{bmatrix} \\quad \\text{va} \\quad \\mathbf{B} = \\begin{bmatrix} 5 &amp; 6 \\\\ 7 &amp; 8 \\end{bmatrix}\\) \\[\\mathbf{A} + \\mathbf{B} = \\begin{bmatrix} 1+5 &amp; 2+6 \\\\ 3+7 &amp; 4+8 \\end{bmatrix} = \\begin{bmatrix} 6 &amp; 8 \\\\ 10 &amp; 12 \\end{bmatrix}\\] Diqqat! Faqat bir hil o’lchamli matritsalarni qo’shish mumkin import numpy as np # Matritsa yaratish A = np.array([[1, 2], [3, 4]]) B = np.array([[5, 6], [7, 8]]) # Matritsalarni qo'shish C = A + B print(C) # yoki C = np.add(A, B) print(C) 2.2.2 Matritsani songa ko’paytirish Matritsani ma’lum bir songa ($\\lambda \\in \\mathbb{R}$) ko’paytirish uchun, matritsani har bir elementini ushbu songa ko’paytiramiz. \\[\\lambda \\mathbf{A} = \\begin{bmatrix} \\lambda a_{11} &amp; \\lambda a_{12} &amp; \\ldots &amp; \\lambda a_{1n} \\\\ \\lambda a_{21} &amp; \\lambda a_{22} &amp; \\ldots &amp; \\lambda a_{2n} \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ \\lambda a_{m1} &amp; \\lambda a_{m2} &amp; \\ldots &amp; \\lambda a_{mn} \\end{bmatrix}\\] Misol uchun, agar $\\lambda = 3$ bo’lsa va \\(\\mathbf{A} = \\begin{bmatrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\end{bmatrix}\\) bo’lsa, \\[\\lambda \\mathbf{A} = 3 \\cdot \\begin{bmatrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\end{bmatrix} = \\begin{bmatrix} 3 &amp; 6 \\\\ 9 &amp; 12 \\end{bmatrix}\\] import numpy as np A = np.array([[1, 2], [3, 4]]) l = 3 # Matritsani songa ko'paytirish C = l * A print(C) 2.2.3 Matritsani vektorga ko’paytirish Matritsani vektorga ko’paytirish uchun, matritsaning har bir qatorini vektorga skalyar ko’paytiramiz, va natijada yangi vektor hosil qilamiz. \\[\\mathbf{A} = \\begin{bmatrix} a_{11} &amp; a_{12} &amp; \\ldots &amp; a_{1n} \\\\ a_{21} &amp; a_{22} &amp; \\ldots &amp; a_{2n} \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ a_{m1} &amp; a_{m2} &amp; \\ldots &amp; a_{mn} \\end{bmatrix} \\quad \\text{va} \\quad \\mathbf{v} = \\begin{bmatrix} v_1 \\\\ v_2 \\\\ \\vdots \\\\ v_n \\end{bmatrix}\\] \\[\\mathbf{A} \\mathbf{v} = \\begin{bmatrix} a_{11} v_1 + a_{12} v_2 + \\ldots + a_{1n} v_n \\\\ a_{21} v_1 + a_{22} v_2 + \\ldots + a_{2n} v_n \\\\ \\vdots \\\\ a_{m1} v_1 + a_{m2} v_2 + \\ldots + a_{mn} v_n \\end{bmatrix} = \\begin{bmatrix} \\sum_{j=1}^{n} a_{1j} v_j \\\\ \\sum_{j=1}^{n} a_{2j} v_j \\\\ \\vdots \\\\ \\sum_{j=1}^{n} a_{mj} v_j \\end{bmatrix}\\] Misol, agar \\(\\mathbf{A} = \\begin{bmatrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\end{bmatrix} \\quad \\text{va} \\quad \\mathbf{v} = \\begin{bmatrix} 5 \\\\ 6 \\end{bmatrix}\\) bo’lsa, \\[\\mathbf{A} \\mathbf{v} = \\begin{bmatrix} 1 \\cdot 5 + 2 \\cdot 6 \\\\ 3 \\cdot 5 + 4 \\cdot 6 \\end{bmatrix} = \\begin{bmatrix} 17 \\\\ 39 \\end{bmatrix}\\] import numpy as np v = np.array([1, 2, 3]) A = np.array([[4, 5, 6], [7, 8, 9], [10, 11, 12]]) B = np.dot(A, v) print(B) # yoki B = A @ v print(B) 2.2.4 Matritsani matritsaga ko’paytirish Matritsani matritsaga ko’paytirish uchun, matritsaning har bir qatorini ikkinchi matritsaning ustuniga ko’paytiramiz, va natijada yangi matritsa hosil qilamiz. \\[\\mathbf{A} = \\begin{bmatrix} a_{11} &amp; \\ldots &amp; a_{1n} \\\\ \\vdots &amp; \\ddots &amp; \\vdots \\\\ a_{m1} &amp; \\ldots &amp; a_{mn} \\end{bmatrix} \\quad \\text{va} \\quad \\mathbf{B} = \\begin{bmatrix} b_{11} &amp; \\ldots &amp; b_{1p} \\\\ \\vdots &amp; \\ddots &amp; \\vdots \\\\ b_{n1} &amp; \\ldots &amp; b_{np} \\end{bmatrix}\\] \\[\\mathbf{A} \\mathbf{B} = \\begin{bmatrix} a_{11} b_{11} + \\ldots + a_{1n} b_{n1} &amp; \\ldots &amp; a_{11} b_{1p} + \\ldots + a_{1n} b_{np} \\\\ \\vdots &amp; \\ddots &amp; \\vdots \\\\ a_{m1} b_{11} + \\ldots + a_{mn} b_{n1} &amp; \\ldots &amp; a_{m1} b_{1p} + \\ldots + a_{mn} b_{np} \\end{bmatrix}\\] Misol, agar \\(\\mathbf{A} = \\begin{bmatrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\end{bmatrix} \\quad \\text{va} \\quad \\mathbf{B} = \\begin{bmatrix} 5 &amp; 6 \\\\ 7 &amp; 8 \\end{bmatrix}\\) bo’lsa, \\[\\mathbf{A} \\mathbf{B} = \\begin{bmatrix} 1 \\cdot 5 + 2 \\cdot 7 &amp; 1 \\cdot 6 + 2 \\cdot 8 \\\\ 3 \\cdot 5 + 4 \\cdot 7 &amp; 3 \\cdot 6 + 4 \\cdot 8 \\end{bmatrix} = \\begin{bmatrix} 19 &amp; 22 \\\\ 43 &amp; 50 \\end{bmatrix}\\] Diqqat! Matritsalar ko’paytirish amaliyotlari uchun matritsalar o’lchamlari mos kelishi kerak. Agar $\\mathbf{A}$ matritsasi $m \\times n$ o’lchamli bo’lsa, $\\mathbf{B}$ matritsasi $n \\times p$ o’lchamli bo’lishi kerak. Ya’ni, $\\mathbf{A}$ matritsasining ustunlar soni $\\mathbf{B}$ matritsasining qatorlar soniga teng bo’lishi kerak. import numpy as np A = np.array([[1, 2], [3, 4]]) B = np.array([[5, 6], [7, 8], [9, 10]]) C = np.dot(A, B) print(C) # yoki C = A @ B print(C) 2.2.5 Hadamard ko’paytirish Matritsalarni Hadamard ko’paytirish uchun, ularning shunchaki mos elementlarini ko’paytiramiz. \\[\\mathbf{A} \\odot \\mathbf{B} = \\begin{bmatrix} a_{11} \\cdot b_{11} &amp; a_{12} \\cdot b_{12} &amp; \\ldots &amp; a_{1n} \\cdot b_{1n} \\\\ a_{21} \\cdot b_{21} &amp; a_{22} \\cdot b_{22} &amp; \\ldots &amp; a_{2n} \\cdot b_{2n} \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ a_{m1} \\cdot b_{m1} &amp; a_{m2} \\cdot b_{m2} &amp; \\ldots &amp; a_{mn} \\cdot b_{mn} \\end{bmatrix}\\] Misol uchun, agar \\(\\mathbf{A} = \\begin{bmatrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\end{bmatrix} \\quad \\text{va} \\quad \\mathbf{B} = \\begin{bmatrix} 5 &amp; 6 \\\\ 7 &amp; 8 \\end{bmatrix}\\) bo’lsa, \\[\\mathbf{A} \\odot \\mathbf{B} = \\begin{bmatrix} 1 \\cdot 5 &amp; 2 \\cdot 6 \\\\ 3 \\cdot 7 &amp; 4 \\cdot 8 \\end{bmatrix} = \\begin{bmatrix} 5 &amp; 12 \\\\ 21 &amp; 32 \\end{bmatrix}\\] import numpy as np A = np.array([[1, 2], [3, 4]]) B = np.array([[5, 6], [7, 8]]) C = np.multiply(A, B) print(C) # yoki C = A * B print(C) 2.3 Matritsa ustida boshqa amallar Matritsalarni ustida boshqa amallar ham bajarish mumkin. Ularning ba’zilari quyidagilardir: matritsa transponatsiyasi matritsa izi (trace) 2.3.1 Matritsa transponatsiyasi Matritsa transponatsiyasi - bu matritsaning ustunlarini qatorlariga, qatorlarini esa ustunlariga almashtirish amaliyotidir. Misol, agar \\(\\mathbf{A} = \\begin{bmatrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\end{bmatrix}\\) bo’lsa, uning transponatasi quyidagicha bo’ladi: \\[\\mathbf{A}^T = \\begin{bmatrix} 1 &amp; 3 \\\\ 2 &amp; 4 \\end{bmatrix}\\] import numpy as np A = np.array([[1, 2], [3, 4]]) B = A.T print(B) # yoki B = np.transpose(A) print(B) # yoki B = A.transpose() print(B) 2.3.2 Matritsa izi (trace) Matritsa izi - bu matritsaning diagonal elementlarini qo’shish amaliyotidir. \\[\\text{trace}(\\mathbf{A}) = \\sum_{i=1}^{n} a_{ii} = a_{11} + a_{22} + \\ldots + a_{nn}\\] Misol, agar \\(\\mathbf{A} = \\begin{bmatrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\end{bmatrix}\\) bo’lsa, uning izi quyidagicha bo’ladi: \\[\\text{trace}(\\mathbf{A}) = 1 + 4 = 5\\] import numpy as np A = np.array([[1, 2], [3, 4]]) t = np.trace(A) print(t) # yoki t = A.trace() print(t)"
  },"/chiziqli-algebra/jekyll/2025-01-13-vektor-kirish.html": {
    "title": "Modul 1. Vektorlar va vektor algebra",
    "keywords": "Jekyll",
    "url": "/chiziqli-algebra/jekyll/2025-01-13-vektor-kirish.html",
    "body": "Vektor sonlarning tartiblangan ro’yxati. Vektorlar odatda kvadrat yoki oddiy qavslar bilan o’ralgan massivlar bo’lib ular vertikal ravishda yoziladi: \\[\\begin{bmatrix} -1.1 \\\\ 0.0 \\\\ 3.6 \\end{bmatrix} \\begin{pmatrix}-1.1 \\\\ 0.0 \\\\ 3.6 \\end{pmatrix}\\] Ular vergul bilan ajratilgan va qavslar bilan o’ralgan raqamlar shaklida ham yozilishi mumkin: \\[(-1.1, 0.0, 3.6)\\] Umuman olganda, $n$ ta elementdan iborat vektor $\\mathbf{x}$ quyidagi ko’rinishda yoziladi: \\[\\mathbf{x} = \\begin{bmatrix} x_1 \\\\ x_2 \\\\ \\vdots \\\\ x_n \\end{bmatrix}\\] $x_i$ - vektorning $i$-chi elementi Diqqat! Butun darsda vektorlar $\\mathbf{v}$ qalinlashtirilgan shaklda bilan ko’rsatiladi. Sonlar esa $v$ kursiv shaklda ko’rsatiladi. Vektorning geometrik tushunchasi esa, vektorning nuqtadan boshlab boshqa nuqta yo’nalishini ko’rsatadi. Manba: 3blue1brown import numpy as np # Vektor yaratish vektor = np.array([-1.1, 0.0, 3.6]) print(vektor) # Vektorning o'lchami print(vektor.shape) # Vektorning elementlari print(vektor[0], vektor[1], vektor[2]) 1.1 Vektor ustida amallar Chiziqli algebraning yuragida ikkita vektor ustida amallar bor. Bular: qo’shish songa ko’paytirish 1.1.1 Vektorlarni Qo’shish Ikkita vektorni (masalan, $\\mathbf{v}$ va $\\mathbf{w}$ ) bir biriga qo’shish uchun ularning mos elementlarini qo’shish kerak. \\[\\mathbf{v} = \\begin{bmatrix} v_1 \\\\ v_2 \\end{bmatrix} \\quad \\text{va} \\quad \\mathbf{w} = \\begin{bmatrix} w_1 \\\\ w_2 \\end{bmatrix}, \\quad \\mathbf{v} + \\mathbf{w} = \\begin{bmatrix} v_1 \\\\ v_2 \\end{bmatrix} + \\begin{bmatrix} w_1 \\\\ w_2 \\end{bmatrix} = \\begin{bmatrix} v_1 + w_1 \\\\ v_2 + w_2 \\end{bmatrix}\\] Misol uchun, ikkita vektorning qo’shish amali quyidagicha: \\[\\mathbf{v} = \\begin{bmatrix} 1 \\\\ 2 \\end{bmatrix} \\quad \\text{va} \\quad \\mathbf{w} = \\begin{bmatrix} 4 \\\\ 5 \\end{bmatrix}, \\quad \\mathbf{v} + \\mathbf{w} = \\begin{bmatrix} 1 \\\\ 2 \\end{bmatrix} + \\begin{bmatrix} 4 \\\\ 5 \\end{bmatrix} = \\begin{bmatrix} 5 \\\\ 7 \\end{bmatrix}\\] Diqqat! Faqat bir hil o’lchamli vektorlarni qo’shish mumkin Manba: 3blue1brown import numpy as np # Vektor yaratish vektor1 = np.array([-1.1, 0.0, 3.6]) vektor2 = np.array([1.1, 0.0, 3.6]) # Vektorlarni qo'shish vektor3 = vektor1 + vektor2 print(vektor3) 1.1.2 Vektorlarni songa ko’paytirish Vektorni ma’lum bir songa ($\\alpha \\in \\mathbb{R}$) ko’paytirish uchun, vektorning har bir elementini ushbu songa ko’paytiramiz. \\[\\mathbf{v} = \\begin{bmatrix} v_1 \\\\ v_2 \\end{bmatrix} \\quad \\text{va} \\quad \\alpha, \\quad \\alpha \\cdot \\mathbf{v} = \\alpha \\cdot \\begin{bmatrix} v_1 \\\\ v_2 \\end{bmatrix} = \\begin{bmatrix} \\alpha \\cdot v_1 \\\\ \\alpha \\cdot v_2 \\end{bmatrix}\\] Misol uchun: \\[\\mathbf{v} = \\begin{bmatrix} 1 \\\\ 2 \\end{bmatrix}, \\quad \\alpha = 3, \\quad \\alpha \\cdot \\mathbf{v} = 3 \\cdot \\begin{bmatrix} 1 \\\\ 2 \\end{bmatrix} = \\begin{bmatrix} 3 \\\\ 6 \\end{bmatrix}\\] Manba: 3blue1brown import numpy as np vektor = np.array([-1.1, 0.0, 3.6]) alpha = 3.0 # Vektorlarni songa ko'paytirish vektor_scaled = alpha * vektor print(vektor_scaled) 1.2 Vektor Normalari va Skalyar Ko’paytirish Vektorlarning songa ko’paytirish va qo’shish amallarini o’rganishdan keyin, vektorlarning normalari va skalyar ko’paytirishini o’rganamiz. 1.2.1 Vektorlarni Skalyar Ko’paytirish Bizda $\\mathbf{a} = \\begin{bmatrix} a_1 &amp; a_2 &amp; … &amp; a_n \\end{bmatrix}$ va $\\mathbf{b} = \\begin{bmatrix} b_1 &amp; b_2 &amp; … &amp; b_n \\end{bmatrix}$ vektorlar bor. Ularning skalyar ko’paytmasi: \\[\\boxed{\\mathbf{a} \\cdot \\mathbf{b} = a_1 b_1 + a_2 b_2 + \\ldots + a_n b_n}\\] \\[= \\sum_{i=1}^{n} a_i b_i\\] \\[= \\mathbf{a}^T \\mathbf{b}\\] Misol: agar $\\mathbf{a} = \\begin{bmatrix} 1 &amp; 2 &amp; 3 \\end{bmatrix}$ va $\\mathbf{b} = \\begin{bmatrix} 4 &amp; 5 &amp; 6 \\end{bmatrix}$ bo’lsa, \\(\\mathbf{a} \\cdot \\mathbf{b} = 1 \\cdot 4 + 2 \\cdot 5 + 3 \\cdot 6 = 4 + 10 + 18 = 32\\) import numpy as np vektor1 = np.array([1, 2, 3]) vektor2 = np.array([4, 5, 6]) # Skalyar ko'paytirish skalyar = np.dot(vektor1, vektor2) # yoki skalyar = vektor1 @ vektor2 print(skalyar) 1.2.2 Vektor Normasi Berilgan ${\\displaystyle p\\geq 1}$ haqiqiy soni uchun, $\\mathbf{v} = \\begin{bmatrix} v_1 &amp; v_2 &amp; \\ldots &amp; v_n \\end{bmatrix}$ vektorning $p$-normasi quyidagi ko’rinishda aniqlanadi: \\[\\boxed{\\| \\mathbf{v} \\|_p = \\left( \\sum_{i=1}^{n} |v_i|^p \\right)^{1/p}}\\] Ko’p qo’llaniladigan normalar bular: $p = 1$ - Manhettan uzunligi yoki $\\ell_1$ normasi \\[\\| \\mathbf{v} \\|_1 = |v_1| + |v_2| + \\ldots + |v_n| = \\sum_{i=1}^{n} |v_i|\\] $p = 2$ - Evklid uzunligi yoki $\\ell_2$ normasi \\[\\| \\mathbf{v} \\|_2 = \\sqrt{v_1^2 + v_2^2 + \\ldots + v_n^2} = \\sqrt{\\sum_{i=1}^{n} v_i^2}\\] $p = \\infty$ - Maksimum normasi yani vektorning eng katta elementi $\\max$ operatori orqali aniqlanadi. \\[\\| \\mathbf{v} \\|_{\\infty} = \\max \\{ |v_1|, |v_2|, \\ldots, |v_n| \\}\\] import numpy as np vektor = np.array([1, 2, 3]) l1_norma = np.linalg.norm(vektor, ord=1) # L1 norma l2_norma = np.linalg.norm(vektor, ord=2) # L2 norma l_inf_norma = np.linalg.norm(vektor, ord=np.inf) # L-inf norma 1.2.3 Vektor Normalari Amalda Qo’llanilishi Birlik vektor (normalangan vektor): \\[\\boxed{\\mathbf {\\hat {u}} ={\\frac {\\mathbf {u} }{\\|\\mathbf {u} \\|}}}\\] va uzunligi 1 ga teng bo’lgan vektor \\(\\|\\mathbf {\\hat {u}} \\| = 1\\) import numpy as np vektor = np.array([1, 2, 3]) birlik_vektor = vektor / np.linalg.norm(vektor) print(birlik_vektor) print(\"uzunligi:\", np.linalg.norm(birlik_vektor)) Masofa (Distance) formulasi: \\[\\boxed{d(\\mathbf{v}, \\mathbf{w}) = \\| \\mathbf{v} - \\mathbf{w} \\|}\\] Ikki vektor orasidagi burchak (Angle between vectors) formulasi: \\[\\boxed{\\cos \\theta = \\frac{\\mathbf{v} \\cdot \\mathbf{w}}{\\| \\mathbf{v} \\| \\| \\mathbf{w} \\|}}\\] import numpy as np vektor1 = np.array([1, 2, 3]) vektor2 = np.array([4, 5, 6]) # Masofa masofa = np.linalg.norm(vektor1 - vektor2) # Kosinus burchak cos_theta = np.dot(vektor1, vektor2) / (np.linalg.norm(vektor1) * np.linalg.norm(vektor2)) 1.3 Chiziqli kombinatsiya va Chiziqli bog’liqlik 1.3.1 Chiziqli Kombinatsiya Agar $\\mathbf{v_1}, \\mathbf{v_2}, \\ldots, \\mathbf{v_n}$ vektorlar va $\\alpha_1, \\alpha_2, \\ldots, \\alpha_n$ skalyar sonlar bo’lsa, ularning chiziqli kombinatsiyalari yangi vektor: \\[\\boxed{\\mathbf{v} = \\alpha_1 \\mathbf{v_1} + \\alpha_2 \\mathbf{v_2} + \\ldots + \\alpha_n \\mathbf{v_n}}\\] 1.3.2 Chiziqli Bog’liqlik Deylik $\\mathbf{v}_1, \\mathbf{v}_2, \\ldots, \\mathbf{v}_n$ vektorlar to’plami. Agar $\\alpha_1, \\alpha_2, \\ldots, \\alpha_n$ skalyarlar bo’lsa va: \\[\\boxed{\\alpha_1 \\mathbf{v}_1 + \\alpha_2 \\mathbf{v}_2 + \\ldots + \\alpha_n \\mathbf{v}_n = \\mathbf{0}}\\] bunda faqat $\\alpha_1 = \\alpha_2 = \\ldots = \\alpha_n = 0$ shartni qanoatlantirsa, $\\mathbf{v}_1, \\mathbf{v}_2, \\ldots, \\mathbf{v}_n$ vektorlar bog’liq emas deb ataladi. Aks holda, ular bog’liq deb ataladi."
  }}
