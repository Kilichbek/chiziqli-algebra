{"/chiziqli-algebra/jekyll/2025-02-28-chiziqli-tenglamalar.html": {
    "title": "Modul 3. Transformatsiya va Chiziqli Tenglamalar",
    "keywords": "Jekyll",
    "url": "/chiziqli-algebra/jekyll/2025-02-28-chiziqli-tenglamalar.html",
    "body": "Birlik matritsa Diagonal elementlari birga teng bo’lgan (boshqa elementlari nol) kvadrat matritsa. \\(\\textit{I}_n := \\begin{bmatrix} 1 &amp; 0 &amp; \\cdots &amp; 0 &amp; 0 \\\\ 0 &amp; 1 &amp; \\cdots &amp; 0 &amp; 0 \\\\ 0 &amp; 0 &amp; \\ddots &amp; 0 &amp; 0 \\\\ 0 &amp; 0 &amp; \\cdots &amp; 1 &amp; 0 \\\\ 0 &amp; 0 &amp; \\cdots &amp; 0 &amp; 1 \\end{bmatrix} \\in \\mathbb{R}^{n \\times n}\\) Birlik matritsaga misollar: import numpy as np # Matritsa yaratish matritsa = np.array( [ [-1.1, 0.0, 3.6], [1.1, 0.0, 3.6], [1.1, 0.0, 3.6] ] ) print(\"Matritsa: \", matritsa) print(\"Matritsa o'lchami: \", matritsa.shape) print(\"1-qator, 3-chi ustunda joylashgan element: \", matrits[0, 2]) print(\"Matritsaning 2-qatori: \", matritsa[1, :]) print(\"Matritsaning 2-ustuni: \", matritsa[:, 1]) 2.1 Matritsa turlari Matritsalar ko’p turli bo’lishi mumkin. Ammo, ularning asosiy turlari quyidagilardir: 2.1.1 Kvadrat matritsa $ n \\times n $ o’lchamli matritsa. Bu matritsa qator va ustunlar soni bir xil bo’lgan matritsa. Misol uchun, \\[\\mathbf{A} = \\begin{bmatrix} 1 &amp; 2 &amp; 3 \\\\ 4 &amp; 5 &amp; 6 \\\\ 7 &amp; 8 &amp; 9 \\end{bmatrix}\\] 2.1.2 To’g’ri to’rtburchak matritsa $ m \\times n $ o’lchamli matritsa. Bu matritsa qator va ustunlar soni bir xil bo’lmagan matritsa. Misol uchun, \\[\\mathbf{A} = \\begin{bmatrix} 1 &amp; 2 &amp; 3 \\\\ 4 &amp; 5 &amp; 6 \\end{bmatrix}\\] 2.1.3 Nol matritsa Barcha elementlari nol bo’lgan matritsa. Misol uchun, \\[\\mathbf{A} = \\begin{bmatrix} 0 &amp; 0 &amp; 0 \\\\ 0 &amp; 0 &amp; 0 \\end{bmatrix}\\] 2.1.4 Diagonal matritsa Kvadrat matritsa bo’lib, diagonal elementlari nol bo’lmagan matritsa. Misol uchun, \\[\\mathbf{A} = \\begin{bmatrix} 1 &amp; 0 &amp; 0 \\\\ 0 &amp; 2 &amp; 0 \\\\ 0 &amp; 0 &amp; 3 \\end{bmatrix}\\] 2.1.5 Birlik matritsa Diagonal elementlari bir bo’lgan diagonal matritsa. Misol uchun, \\[\\mathbf{I} = \\begin{bmatrix} 1 &amp; 0 &amp; 0 \\\\ 0 &amp; 1 &amp; 0 \\\\ 0 &amp; 0 &amp; 1 \\end{bmatrix}\\] 2.1.6 Simmetrik matritsa Diagonal bo’yicha bu matritsaning elementlari simmetrik bo’lgan matritsa. Ya’ni, $a_{ij} = a_{ji}$ shartni qanoatlantiradigan matritsa. Misol uchun, \\[\\mathbf{A} = \\begin{bmatrix} 1 &amp; 2 &amp; 3 \\\\ 2 &amp; 4 &amp; 5 \\\\ 3 &amp; 5 &amp; 6 \\end{bmatrix}\\] 2.1.7 Uchburchak matritsa Uchburchak matritsalar ikki turdagi bo’lishi mumkin: Yuqoridan uchburchak matritsa Quyidan uchburchak matritsa Yuqoridan uchburchak matritsa bu diagonal elentlaridan pastki elementlari nol bo’lgan matritsa. Misol uchun, \\[\\mathbf{U} = \\begin{bmatrix} 1 &amp; 2 &amp; 3 \\\\ 0 &amp; 4 &amp; 5 \\\\ 0 &amp; 0 &amp; 6 \\end{bmatrix}\\] Quyidan uchburchak matritsa bu diagonal elentlaridan yuqori elementlari nol bo’lgan matritsa. Misol uchun, \\[\\mathbf{L} = \\begin{bmatrix} 1 &amp; 0 &amp; 0 \\\\ 2 &amp; 4 &amp; 0 \\\\ 3 &amp; 5 &amp; 6 \\end{bmatrix}\\] 2.2 Matritsa ustida amallar Chiziqli algebrada matritsalarnig ustida: qo’shish matritsani songa ko’paytirish matritsani vektorga ko’paytirish matritsani matritsaga ko’paytirish kabi amallar bajariladi. 2.2.1 Matritsalarni Qo’shish Ikkita $m \\times n$ o’lchamli matritsani (masalan, $\\mathbf{A}$ va $\\mathbf{B}$ ) bir biriga qo’shish uchun ularning mos elementlarini qo’shish kerak. \\[\\mathbf{A} + \\mathbf{B} = \\begin{bmatrix} a_{11} + b_{11} &amp; a_{12} + b_{12} &amp; \\ldots &amp; a_{1n} + b_{1n} \\\\ a_{21} + b_{21} &amp; a_{22} + b_{22} &amp; \\ldots &amp; a_{2n} + b_{2n} \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ a_{m1} + b_{m1} &amp; a_{m2} + b_{m2} &amp; \\ldots &amp; a_{mn} + b_{mn} \\end{bmatrix}\\] Misol uchun, ikkita matritsaning qo’shish amali quyidagicha: agar \\(\\mathbf{A} = \\begin{bmatrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\end{bmatrix} \\quad \\text{va} \\quad \\mathbf{B} = \\begin{bmatrix} 5 &amp; 6 \\\\ 7 &amp; 8 \\end{bmatrix}\\) \\[\\mathbf{A} + \\mathbf{B} = \\begin{bmatrix} 1+5 &amp; 2+6 \\\\ 3+7 &amp; 4+8 \\end{bmatrix} = \\begin{bmatrix} 6 &amp; 8 \\\\ 10 &amp; 12 \\end{bmatrix}\\] Diqqat! Faqat bir hil o’lchamli matritsalarni qo’shish mumkin import numpy as np # Matritsa yaratish A = np.array([[1, 2], [3, 4]]) B = np.array([[5, 6], [7, 8]]) # Matritsalarni qo'shish C = A + B print(C) # yoki C = np.add(A, B) print(C) 2.2.2 Matritsani songa ko’paytirish Matritsani ma’lum bir songa ($\\lambda \\in \\mathbb{R}$) ko’paytirish uchun, matritsani har bir elementini ushbu songa ko’paytiramiz. \\[\\lambda \\mathbf{A} = \\begin{bmatrix} \\lambda a_{11} &amp; \\lambda a_{12} &amp; \\ldots &amp; \\lambda a_{1n} \\\\ \\lambda a_{21} &amp; \\lambda a_{22} &amp; \\ldots &amp; \\lambda a_{2n} \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ \\lambda a_{m1} &amp; \\lambda a_{m2} &amp; \\ldots &amp; \\lambda a_{mn} \\end{bmatrix}\\] Misol uchun, agar $\\lambda = 3$ bo’lsa va \\(\\mathbf{A} = \\begin{bmatrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\end{bmatrix}\\) bo’lsa, \\[\\lambda \\mathbf{A} = 3 \\cdot \\begin{bmatrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\end{bmatrix} = \\begin{bmatrix} 3 &amp; 6 \\\\ 9 &amp; 12 \\end{bmatrix}\\] import numpy as np A = np.array([[1, 2], [3, 4]]) l = 3 # Matritsani songa ko'paytirish C = l * A print(C) 2.2.3 Matritsani vektorga ko’paytirish Matritsani vektorga ko’paytirish uchun, matritsaning har bir qatorini vektorga skalyar ko’paytiramiz, va natijada yangi vektor hosil qilamiz. \\[\\mathbf{A} = \\begin{bmatrix} a_{11} &amp; a_{12} &amp; \\ldots &amp; a_{1n} \\\\ a_{21} &amp; a_{22} &amp; \\ldots &amp; a_{2n} \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ a_{m1} &amp; a_{m2} &amp; \\ldots &amp; a_{mn} \\end{bmatrix} \\quad \\text{va} \\quad \\mathbf{v} = \\begin{bmatrix} v_1 \\\\ v_2 \\\\ \\vdots \\\\ v_n \\end{bmatrix}\\] \\[\\mathbf{A} \\mathbf{v} = \\begin{bmatrix} a_{11} v_1 + a_{12} v_2 + \\ldots + a_{1n} v_n \\\\ a_{21} v_1 + a_{22} v_2 + \\ldots + a_{2n} v_n \\\\ \\vdots \\\\ a_{m1} v_1 + a_{m2} v_2 + \\ldots + a_{mn} v_n \\end{bmatrix} = \\begin{bmatrix} \\sum_{j=1}^{n} a_{1j} v_j \\\\ \\sum_{j=1}^{n} a_{2j} v_j \\\\ \\vdots \\\\ \\sum_{j=1}^{n} a_{mj} v_j \\end{bmatrix}\\] Misol, agar \\(\\mathbf{A} = \\begin{bmatrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\end{bmatrix} \\quad \\text{va} \\quad \\mathbf{v} = \\begin{bmatrix} 5 \\\\ 6 \\end{bmatrix}\\) bo’lsa, \\[\\mathbf{A} \\mathbf{v} = \\begin{bmatrix} 1 \\cdot 5 + 2 \\cdot 6 \\\\ 3 \\cdot 5 + 4 \\cdot 6 \\end{bmatrix} = \\begin{bmatrix} 17 \\\\ 39 \\end{bmatrix}\\] import numpy as np v = np.array([1, 2, 3]) A = np.array([[4, 5, 6], [7, 8, 9], [10, 11, 12]]) B = np.dot(A, v) print(B) # yoki B = A @ v print(B) 2.2.4 Matritsani matritsaga ko’paytirish Matritsani matritsaga ko’paytirish uchun, matritsaning har bir qatorini ikkinchi matritsaning ustuniga ko’paytiramiz, va natijada yangi matritsa hosil qilamiz. \\[\\mathbf{A} = \\begin{bmatrix} a_{11} &amp; \\ldots &amp; a_{1n} \\\\ \\vdots &amp; \\ddots &amp; \\vdots \\\\ a_{m1} &amp; \\ldots &amp; a_{mn} \\end{bmatrix} \\quad \\text{va} \\quad \\mathbf{B} = \\begin{bmatrix} b_{11} &amp; \\ldots &amp; b_{1p} \\\\ \\vdots &amp; \\ddots &amp; \\vdots \\\\ b_{n1} &amp; \\ldots &amp; b_{np} \\end{bmatrix}\\] \\[\\mathbf{A} \\mathbf{B} = \\begin{bmatrix} a_{11} b_{11} + \\ldots + a_{1n} b_{n1} &amp; \\ldots &amp; a_{11} b_{1p} + \\ldots + a_{1n} b_{np} \\\\ \\vdots &amp; \\ddots &amp; \\vdots \\\\ a_{m1} b_{11} + \\ldots + a_{mn} b_{n1} &amp; \\ldots &amp; a_{m1} b_{1p} + \\ldots + a_{mn} b_{np} \\end{bmatrix}\\] Misol, agar \\(\\mathbf{A} = \\begin{bmatrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\end{bmatrix} \\quad \\text{va} \\quad \\mathbf{B} = \\begin{bmatrix} 5 &amp; 6 \\\\ 7 &amp; 8 \\end{bmatrix}\\) bo’lsa, \\[\\mathbf{A} \\mathbf{B} = \\begin{bmatrix} 1 \\cdot 5 + 2 \\cdot 7 &amp; 1 \\cdot 6 + 2 \\cdot 8 \\\\ 3 \\cdot 5 + 4 \\cdot 7 &amp; 3 \\cdot 6 + 4 \\cdot 8 \\end{bmatrix} = \\begin{bmatrix} 19 &amp; 22 \\\\ 43 &amp; 50 \\end{bmatrix}\\] Diqqat! Matritsalar ko’paytirish amaliyotlari uchun matritsalar o’lchamlari mos kelishi kerak. Agar $\\mathbf{A}$ matritsasi $m \\times n$ o’lchamli bo’lsa, $\\mathbf{B}$ matritsasi $n \\times p$ o’lchamli bo’lishi kerak. Ya’ni, $\\mathbf{A}$ matritsasining ustunlar soni $\\mathbf{B}$ matritsasining qatorlar soniga teng bo’lishi kerak. import numpy as np A = np.array([[1, 2], [3, 4]]) B = np.array([[5, 6], [7, 8], [9, 10]]) C = np.dot(A, B) print(C) # yoki C = A @ B print(C) 2.2.5 Hadamard ko’paytirish Matritsalarni Hadamard ko’paytirish uchun, ularning shunchaki mos elementlarini ko’paytiramiz. \\[\\mathbf{A} \\odot \\mathbf{B} = \\begin{bmatrix} a_{11} \\cdot b_{11} &amp; a_{12} \\cdot b_{12} &amp; \\ldots &amp; a_{1n} \\cdot b_{1n} \\\\ a_{21} \\cdot b_{21} &amp; a_{22} \\cdot b_{22} &amp; \\ldots &amp; a_{2n} \\cdot b_{2n} \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ a_{m1} \\cdot b_{m1} &amp; a_{m2} \\cdot b_{m2} &amp; \\ldots &amp; a_{mn} \\cdot b_{mn} \\end{bmatrix}\\] Misol uchun, agar \\(\\mathbf{A} = \\begin{bmatrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\end{bmatrix} \\quad \\text{va} \\quad \\mathbf{B} = \\begin{bmatrix} 5 &amp; 6 \\\\ 7 &amp; 8 \\end{bmatrix}\\) bo’lsa, \\[\\mathbf{A} \\odot \\mathbf{B} = \\begin{bmatrix} 1 \\cdot 5 &amp; 2 \\cdot 6 \\\\ 3 \\cdot 7 &amp; 4 \\cdot 8 \\end{bmatrix} = \\begin{bmatrix} 5 &amp; 12 \\\\ 21 &amp; 32 \\end{bmatrix}\\] import numpy as np A = np.array([[1, 2], [3, 4]]) B = np.array([[5, 6], [7, 8]]) C = np.multiply(A, B) print(C) # yoki C = A * B print(C) 2.3 Matritsa ustida boshqa amallar Matritsalarni ustida boshqa amallar ham bajarish mumkin. Ularning ba’zilari quyidagilardir: matritsa transponatsiyasi matritsa izi (trace) 2.3.1 Matritsa transponatsiyasi Matritsa transponatsiyasi - bu matritsaning ustunlarini qatorlariga, qatorlarini esa ustunlariga almashtirish amaliyotidir. Misol, agar \\(\\mathbf{A} = \\begin{bmatrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\end{bmatrix}\\) bo’lsa, uning transponatasi quyidagicha bo’ladi: \\[\\mathbf{A}^T = \\begin{bmatrix} 1 &amp; 3 \\\\ 2 &amp; 4 \\end{bmatrix}\\] import numpy as np A = np.array([[1, 2], [3, 4]]) B = A.T print(B) # yoki B = np.transpose(A) print(B) # yoki B = A.transpose() print(B) 2.3.2 Matritsa izi (trace) Matritsa izi - bu matritsaning diagonal elementlarini qo’shish amaliyotidir. \\[\\text{trace}(\\mathbf{A}) = \\sum_{i=1}^{n} a_{ii} = a_{11} + a_{22} + \\ldots + a_{nn}\\] Misol, agar \\(\\mathbf{A} = \\begin{bmatrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\end{bmatrix}\\) bo’lsa, uning izi quyidagicha bo’ladi: \\[\\text{trace}(\\mathbf{A}) = 1 + 4 = 5\\] import numpy as np A = np.array([[1, 2], [3, 4]]) t = np.trace(A) print(t) # yoki t = A.trace() print(t)"
  },"/chiziqli-algebra/jekyll/2025-01-13-vazifalar.html": {
    "title": "Vazifalar",
    "keywords": "Jekyll",
    "url": "/chiziqli-algebra/jekyll/2025-01-13-vazifalar.html",
    "body": "Vazifa 1: Vektorlar va Vektor Algebra 1.1 Vektor ustida amallar Agar \\(\\textbf{u}= \\begin{bmatrix} 5 \\\\ 2 \\\\ 9 \\end{bmatrix}\\) va \\(\\textbf{v}= \\begin{bmatrix} 1 \\\\ -8 \\\\ 6 \\end{bmatrix}\\), $c=0.5$ bo’lsa, quyidagilarni bajaring: $\\textbf{u} + \\textbf{v}$ $\\textbf{u} - \\textbf{v}$ $c\\textbf{u}$ $\\textbf{v}$ uzunligi $\\textbf{u}$ larining birlik vektori ko’rinishi 1.2 Vektor normasi va skalyar ko’paytma Agar \\(\\textbf{u}= \\begin{bmatrix} 1 \\\\ -1 \\\\ 2 \\end{bmatrix}\\) va \\(\\textbf{v}= \\begin{bmatrix} 3 \\\\ -1 \\\\ 4 \\end{bmatrix}\\), quyidagilarni toping: $\\textbf{u}$ vektorining $L_1$ normasi $\\textbf{v}$ vektorining $L_2$ normasi $\\textbf{u} \\cdot \\textbf{v}$ $d(\\textbf{u}, \\textbf{v})$ (Evklid masofa) $\\textbf{u}$ va $\\textbf{v}$ orasidagi burchak 1.3 Chiziqli kombinatsiya va bog’liqlik Quyidagilarni aniqlang: \\(\\textbf{u}= \\begin{bmatrix} 1 \\\\ 2 \\end{bmatrix}, \\textbf{v}= \\begin{bmatrix} 3 \\\\ 4 \\end{bmatrix}, \\textbf{w}= \\begin{bmatrix} 5 \\\\ 6 \\end{bmatrix}\\) chiziqli bog’liqmi? \\(\\textbf{u}= \\begin{bmatrix} 1 \\\\ 2 \\end{bmatrix}, \\textbf{v}= \\begin{bmatrix} 3 \\\\ 4 \\end{bmatrix}, \\textbf{w}= \\begin{bmatrix} 8 \\\\ 14 \\end{bmatrix}\\) chiziqli bog’liqmi? 1.4 📌 Mini-Loyiha: Oddiy Film Tavsiya Qiluvchi Tizim Tasavvur qiling siz Netflix companiyasida ishlayapsiz. Ma’lumotlar bazasi: Film nomi Jangari ⚔️ Romantik 💕 Fantastika 🚀 Drama 🎭 Komediya 😂 Sheryurak 5 1 2 1 0 Titanik 1 4 2 2 1 Avatar 3 2 5 2 1 Buyuk Getsbi 1 2 3 4 0 Pushti Pantera 1 1 4 1 5 Foydalanuvchi qiziqishlari: [Jangari = 5, Romantik = 3, Fantastika = 1, Drama = 2, Komediya = 2] 🎯 Maqsad: Foydalanuvchining yoqtirgan kino janrlariga asoslanib, unga mos filmlarni tavsiya qilish. Google Colab da vazifani bajarishingiz mumkin! Vazifa 1: Vektorlar va Vektor ustida amallar Vazifa 2: Matritsa Asoslari 2.1.1 Matritsani elementlarini o’zgartirish Quyidagi berilgan matritsa elementlarini shunda o’zgartiringki, natijada berilgan kulgan smaylik rasmi chiqsin. Izoh: siz pikselni o’zgartirishda, matritsa elementlarini o’zgartirish orqali rasmda o’zgarishni ko’rsatishingiz mumkin. Buning uchun 0 va 1 sonlaridan foydalanishingiz mumkin. 0 - oq rang, 1 - qora rang. import numpy as np import matplotlib.pyplot as plt # &lt; sizning kodlaringiz bu yerda yozing&gt; smile = np.zeros((16, 16), dtype=int) # &lt;pastdagi matritsa elementlarini o'zgartirng&gt; smile[4:6, 4:6] = 1 smile[4:6, 10:12] = 1 smile[10, 4:12] = 1 smile[11, 3:5] = 1 smile[11, 11:13] = 1 # Yaratilgan matritsa shunday ko'rinishda bo'lish kerak plt.imshow(smile, cmap='gray') 2.1.2 Matritsa Yaratish Quyidagi funksiyalardan foydalanib turli xil matritsalarni yarating: np.random.randint(a, b, (m, n)) # a va b orasidagi tasodifiy sonlar bilan to'ldirilgan m x n matritsa np.zeros((m, n)) # nol elementlar bilan to'ldirilgan m x n matritsa np.ones((m, n)) # bir elementlar bilan to'ldirilgan m x n matritsa 5 x 100 elementlarini 0 va 50 orasidagi tasodifiy sonlar bilan to’ldirilgan matritsa 100 x 5 nol elementlar bilan to’ldirilgan matritsa 5 x 5 bir elementlar bilan to’ldirilgan matritsa 2.2 Matritsa Ustida Amallar Quyidagi matritsalarni yaratib, ular ustida amallar bajarib ko’ring: \\(A = \\begin{bmatrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\end{bmatrix}\\), \\(B = \\begin{bmatrix} 5 &amp; 6 \\\\ 7 &amp; 8 \\end{bmatrix}\\) matritsalarni yarating. $A + B$ va $A - B$ amallarini toping $A B$ amalini toping $A \\textbf{v}$ amalini toping, \\(\\textbf{v} = \\begin{bmatrix} 1 \\\\ 2 \\end{bmatrix}\\) $A B \\textbf{v}$ amalini toping $A \\odot B $ amalini toping $A^T$ va $B^T$ amallarini toping $A \\odot B^T$ amalini toping $A^T B$ amalini toping $A^T B^T$ amalini toping $\\text{tr}(A)$ va $\\text{tr}(B)$ amallarini toping $\\text{tr}(A B)$ va $\\text{tr}(B A)$ amallarini toping $\\text{tr}(A B^T)$ va $\\text{tr}(B^T A)$ amallarini toping $\\text{tr(A - B)}$ va $\\text{tr(A) - tr(B)}$ tengliklarini tekshiring 2.3 🎨 Mini-Loyiha: Tasvirni Manipulyatsiya Qilish 🖼️ 🎯 Maqsad Berilgan tasvir ustida matritsa amallari yordamida ishlov berish va uni kulrang tasvirga (grayscale) aylantirish. 📌 Tasvir va Matritsa Tushunchasi Rangli tasvir (RGB) 3 ta matritsadan iborat: 🔴 R (Red) – Qizil rang matritsasi 🟢 G (Green) – Yashil rang matritsasi 🔵 B (Blue) – Ko‘k rang matritsasi Har bir matritsa 0 dan 255 gacha bo‘lgan qiymatlardan iborat bo‘lib, tasvirning har bir pikselini ifodalaydi. Misol: Quyidagi rangli tasvirni uchta matritsaga ajratish mumkin: 📷 Tasvir haqida ma’lumot: Bu rasm Buxoro amiri Muhammad Olimxon (1880–1944) ga tegishli bo‘lib, 1911-yilda Sergey Prokudin-Gorskiy tomonidan olingan. Surat uch xil ko‘k, yashil va qizil (RGB) filtrlar yordamida tushirilgan va keyinchalik rangli tasvirga aylantirilgan. 📌 Kulrang Tasvir (Grayscale) Kulrang tasvirda faqat yorug‘lik intensivligi saqlanadi, ranglar esa yo‘qoladi. Tasvirni kulrangga aylantirish uchun quyidagi formuladan foydalanamiz: \\[Y = 0.299 \\cdot R + 0.587 \\cdot G + 0.114 \\cdot B\\] Bu yerda: ✅ Y – Yorug‘lik intensivligi matritsasi (grayscale) ✅ R, G, B – Qizil, yashil va ko‘k ranglar matritsalari 📌 Qadamlar 🛠️ 1. Tasvirning maksimum va minimum piksel qiymatlarini topish np.max() va np.min() funksiyalaridan foydalaning. 📏 2. Tasvir o‘lchamini aniqlash Tasvir matritsasining qator, ustun va kanallar sonini toping. 🌈 3. Tasvirni RGB kanallariga ajratish Har bir rang matritsasini ajratish uchun img[:, :, i] indekslashdan foydalaning. 📊 4. Har bir rang matritsasini [0,1] oralig‘iga normallashtirish Formula: \\(I = \\frac{X - X_{min}}{X_{max} - X_{min}}\\) ⚫ 5. Tasvirni “Grayscale” ga o‘tkazish Formula: \\(Y = 0.299 \\cdot R + 0.587 \\cdot G + 0.114 \\cdot B\\) O‘lchamni o‘zgartirmasdan, ranglarni intensivlikka aylantiring. 🎯 Natija: Siz tasvirni matritsalar asosida tahlil qilish va uni kulrang formatga o‘tkazish bo‘yicha bilim va tajriba olasiz! 🚀 Google Colab da vazifani bajarishingiz mumkin! Vazifa 2: Matritsa Asoslari"
  },"/chiziqli-algebra/jekyll/2025-01-13-matritsalar.html": {
    "title": "Modul 2. Matritsa Asoslari",
    "keywords": "Jekyll",
    "url": "/chiziqli-algebra/jekyll/2025-01-13-matritsalar.html",
    "body": "Matritsa $m$ ta qator va $n$ ta ustundan tashkil topgan sonlarning ro’yxati. Matritsalar odatda kvadrat yoki oddiy qavslar bilan o’ralgan jadvallar bo’lib ular ushbu ko’rinishda yoziladi: \\(\\mathbf{A} = \\begin{bmatrix} a_{11} &amp; a_{12} &amp; \\ldots &amp; a_{1n} \\\\ a_{21} &amp; a_{22} &amp; \\ldots &amp; a_{2n} \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ a_{m1} &amp; a_{m2} &amp; \\ldots &amp; a_{mn} \\end{bmatrix}\\) yoki \\(\\mathbf{A} = \\begin{pmatrix} a_{11} &amp; a_{12} &amp; \\ldots &amp; a_{1n} \\\\ a_{21} &amp; a_{22} &amp; \\ldots &amp; a_{2n} \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ a_{m1} &amp; a_{m2} &amp; \\ldots &amp; a_{mn} \\end{pmatrix}\\) A - matritsa, $a_{ij}$ - matritsa elementlari, $i$ - qator, $j$ esa ustun raqamini ko’rsatadi. import numpy as np # Matritsa yaratish matritsa = np.array( [ [-1.1, 0.0, 3.6], [1.1, 0.0, 3.6], [1.1, 0.0, 3.6] ] ) print(\"Matritsa: \", matritsa) print(\"Matritsa o'lchami: \", matritsa.shape) print(\"1-qator, 3-chi ustunda joylashgan element: \", matrits[0, 2]) print(\"Matritsaning 2-qatori: \", matritsa[1, :]) print(\"Matritsaning 2-ustuni: \", matritsa[:, 1]) 2.1 Matritsa turlari Matritsalar ko’p turli bo’lishi mumkin. Ammo, ularning asosiy turlari quyidagilardir: 2.1.1 Kvadrat matritsa $ n \\times n $ o’lchamli matritsa. Bu matritsa qator va ustunlar soni bir xil bo’lgan matritsa. Misol uchun, \\[\\mathbf{A} = \\begin{bmatrix} 1 &amp; 2 &amp; 3 \\\\ 4 &amp; 5 &amp; 6 \\\\ 7 &amp; 8 &amp; 9 \\end{bmatrix}\\] 2.1.2 To’g’ri to’rtburchak matritsa $ m \\times n $ o’lchamli matritsa. Bu matritsa qator va ustunlar soni bir xil bo’lmagan matritsa. Misol uchun, \\[\\mathbf{A} = \\begin{bmatrix} 1 &amp; 2 &amp; 3 \\\\ 4 &amp; 5 &amp; 6 \\end{bmatrix}\\] 2.1.3 Nol matritsa Barcha elementlari nol bo’lgan matritsa. Misol uchun, \\[\\mathbf{A} = \\begin{bmatrix} 0 &amp; 0 &amp; 0 \\\\ 0 &amp; 0 &amp; 0 \\end{bmatrix}\\] 2.1.4 Diagonal matritsa Kvadrat matritsa bo’lib, diagonal elementlari nol bo’lmagan matritsa. Misol uchun, \\[\\mathbf{A} = \\begin{bmatrix} 1 &amp; 0 &amp; 0 \\\\ 0 &amp; 2 &amp; 0 \\\\ 0 &amp; 0 &amp; 3 \\end{bmatrix}\\] 2.1.5 Birlik matritsa Diagonal elementlari bir bo’lgan diagonal matritsa. Misol uchun, \\[\\mathbf{I} = \\begin{bmatrix} 1 &amp; 0 &amp; 0 \\\\ 0 &amp; 1 &amp; 0 \\\\ 0 &amp; 0 &amp; 1 \\end{bmatrix}\\] 2.1.6 Simmetrik matritsa Diagonal bo’yicha bu matritsaning elementlari simmetrik bo’lgan matritsa. Ya’ni, $a_{ij} = a_{ji}$ shartni qanoatlantiradigan matritsa. Misol uchun, \\[\\mathbf{A} = \\begin{bmatrix} 1 &amp; 2 &amp; 3 \\\\ 2 &amp; 4 &amp; 5 \\\\ 3 &amp; 5 &amp; 6 \\end{bmatrix}\\] 2.1.7 Uchburchak matritsa Uchburchak matritsalar ikki turdagi bo’lishi mumkin: Yuqoridan uchburchak matritsa Quyidan uchburchak matritsa Yuqoridan uchburchak matritsa bu diagonal elentlaridan pastki elementlari nol bo’lgan matritsa. Misol uchun, \\[\\mathbf{U} = \\begin{bmatrix} 1 &amp; 2 &amp; 3 \\\\ 0 &amp; 4 &amp; 5 \\\\ 0 &amp; 0 &amp; 6 \\end{bmatrix}\\] Quyidan uchburchak matritsa bu diagonal elentlaridan yuqori elementlari nol bo’lgan matritsa. Misol uchun, \\[\\mathbf{L} = \\begin{bmatrix} 1 &amp; 0 &amp; 0 \\\\ 2 &amp; 4 &amp; 0 \\\\ 3 &amp; 5 &amp; 6 \\end{bmatrix}\\] 2.2 Matritsa ustida amallar Chiziqli algebrada matritsalarnig ustida: qo’shish matritsani songa ko’paytirish matritsani vektorga ko’paytirish matritsani matritsaga ko’paytirish kabi amallar bajariladi. 2.2.1 Matritsalarni Qo’shish Ikkita $m \\times n$ o’lchamli matritsani (masalan, $\\mathbf{A}$ va $\\mathbf{B}$ ) bir biriga qo’shish uchun ularning mos elementlarini qo’shish kerak. \\[\\mathbf{A} + \\mathbf{B} = \\begin{bmatrix} a_{11} + b_{11} &amp; a_{12} + b_{12} &amp; \\ldots &amp; a_{1n} + b_{1n} \\\\ a_{21} + b_{21} &amp; a_{22} + b_{22} &amp; \\ldots &amp; a_{2n} + b_{2n} \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ a_{m1} + b_{m1} &amp; a_{m2} + b_{m2} &amp; \\ldots &amp; a_{mn} + b_{mn} \\end{bmatrix}\\] Misol uchun, ikkita matritsaning qo’shish amali quyidagicha: agar \\(\\mathbf{A} = \\begin{bmatrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\end{bmatrix} \\quad \\text{va} \\quad \\mathbf{B} = \\begin{bmatrix} 5 &amp; 6 \\\\ 7 &amp; 8 \\end{bmatrix}\\) \\[\\mathbf{A} + \\mathbf{B} = \\begin{bmatrix} 1+5 &amp; 2+6 \\\\ 3+7 &amp; 4+8 \\end{bmatrix} = \\begin{bmatrix} 6 &amp; 8 \\\\ 10 &amp; 12 \\end{bmatrix}\\] Diqqat! Faqat bir hil o’lchamli matritsalarni qo’shish mumkin import numpy as np # Matritsa yaratish A = np.array([[1, 2], [3, 4]]) B = np.array([[5, 6], [7, 8]]) # Matritsalarni qo'shish C = A + B print(C) # yoki C = np.add(A, B) print(C) 2.2.2 Matritsani songa ko’paytirish Matritsani ma’lum bir songa ($\\lambda \\in \\mathbb{R}$) ko’paytirish uchun, matritsani har bir elementini ushbu songa ko’paytiramiz. \\[\\lambda \\mathbf{A} = \\begin{bmatrix} \\lambda a_{11} &amp; \\lambda a_{12} &amp; \\ldots &amp; \\lambda a_{1n} \\\\ \\lambda a_{21} &amp; \\lambda a_{22} &amp; \\ldots &amp; \\lambda a_{2n} \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ \\lambda a_{m1} &amp; \\lambda a_{m2} &amp; \\ldots &amp; \\lambda a_{mn} \\end{bmatrix}\\] Misol uchun, agar $\\lambda = 3$ bo’lsa va \\(\\mathbf{A} = \\begin{bmatrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\end{bmatrix}\\) bo’lsa, \\[\\lambda \\mathbf{A} = 3 \\cdot \\begin{bmatrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\end{bmatrix} = \\begin{bmatrix} 3 &amp; 6 \\\\ 9 &amp; 12 \\end{bmatrix}\\] import numpy as np A = np.array([[1, 2], [3, 4]]) l = 3 # Matritsani songa ko'paytirish C = l * A print(C) 2.2.3 Matritsani vektorga ko’paytirish Matritsani vektorga ko’paytirish uchun, matritsaning har bir qatorini vektorga skalyar ko’paytiramiz, va natijada yangi vektor hosil qilamiz. \\[\\mathbf{A} = \\begin{bmatrix} a_{11} &amp; a_{12} &amp; \\ldots &amp; a_{1n} \\\\ a_{21} &amp; a_{22} &amp; \\ldots &amp; a_{2n} \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ a_{m1} &amp; a_{m2} &amp; \\ldots &amp; a_{mn} \\end{bmatrix} \\quad \\text{va} \\quad \\mathbf{v} = \\begin{bmatrix} v_1 \\\\ v_2 \\\\ \\vdots \\\\ v_n \\end{bmatrix}\\] \\[\\mathbf{A} \\mathbf{v} = \\begin{bmatrix} a_{11} v_1 + a_{12} v_2 + \\ldots + a_{1n} v_n \\\\ a_{21} v_1 + a_{22} v_2 + \\ldots + a_{2n} v_n \\\\ \\vdots \\\\ a_{m1} v_1 + a_{m2} v_2 + \\ldots + a_{mn} v_n \\end{bmatrix} = \\begin{bmatrix} \\sum_{j=1}^{n} a_{1j} v_j \\\\ \\sum_{j=1}^{n} a_{2j} v_j \\\\ \\vdots \\\\ \\sum_{j=1}^{n} a_{mj} v_j \\end{bmatrix}\\] Misol, agar \\(\\mathbf{A} = \\begin{bmatrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\end{bmatrix} \\quad \\text{va} \\quad \\mathbf{v} = \\begin{bmatrix} 5 \\\\ 6 \\end{bmatrix}\\) bo’lsa, \\[\\mathbf{A} \\mathbf{v} = \\begin{bmatrix} 1 \\cdot 5 + 2 \\cdot 6 \\\\ 3 \\cdot 5 + 4 \\cdot 6 \\end{bmatrix} = \\begin{bmatrix} 17 \\\\ 39 \\end{bmatrix}\\] import numpy as np v = np.array([1, 2, 3]) A = np.array([[4, 5, 6], [7, 8, 9], [10, 11, 12]]) B = np.dot(A, v) print(B) # yoki B = A @ v print(B) 2.2.4 Matritsani matritsaga ko’paytirish Matritsani matritsaga ko’paytirish uchun, matritsaning har bir qatorini ikkinchi matritsaning ustuniga ko’paytiramiz, va natijada yangi matritsa hosil qilamiz. \\[\\mathbf{A} = \\begin{bmatrix} a_{11} &amp; \\ldots &amp; a_{1n} \\\\ \\vdots &amp; \\ddots &amp; \\vdots \\\\ a_{m1} &amp; \\ldots &amp; a_{mn} \\end{bmatrix} \\quad \\text{va} \\quad \\mathbf{B} = \\begin{bmatrix} b_{11} &amp; \\ldots &amp; b_{1p} \\\\ \\vdots &amp; \\ddots &amp; \\vdots \\\\ b_{n1} &amp; \\ldots &amp; b_{np} \\end{bmatrix}\\] \\[\\mathbf{A} \\mathbf{B} = \\begin{bmatrix} a_{11} b_{11} + \\ldots + a_{1n} b_{n1} &amp; \\ldots &amp; a_{11} b_{1p} + \\ldots + a_{1n} b_{np} \\\\ \\vdots &amp; \\ddots &amp; \\vdots \\\\ a_{m1} b_{11} + \\ldots + a_{mn} b_{n1} &amp; \\ldots &amp; a_{m1} b_{1p} + \\ldots + a_{mn} b_{np} \\end{bmatrix}\\] Misol, agar \\(\\mathbf{A} = \\begin{bmatrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\end{bmatrix} \\quad \\text{va} \\quad \\mathbf{B} = \\begin{bmatrix} 5 &amp; 6 \\\\ 7 &amp; 8 \\end{bmatrix}\\) bo’lsa, \\[\\mathbf{A} \\mathbf{B} = \\begin{bmatrix} 1 \\cdot 5 + 2 \\cdot 7 &amp; 1 \\cdot 6 + 2 \\cdot 8 \\\\ 3 \\cdot 5 + 4 \\cdot 7 &amp; 3 \\cdot 6 + 4 \\cdot 8 \\end{bmatrix} = \\begin{bmatrix} 19 &amp; 22 \\\\ 43 &amp; 50 \\end{bmatrix}\\] Diqqat! Matritsalar ko’paytirish amaliyotlari uchun matritsalar o’lchamlari mos kelishi kerak. Agar $\\mathbf{A}$ matritsasi $m \\times n$ o’lchamli bo’lsa, $\\mathbf{B}$ matritsasi $n \\times p$ o’lchamli bo’lishi kerak. Ya’ni, $\\mathbf{A}$ matritsasining ustunlar soni $\\mathbf{B}$ matritsasining qatorlar soniga teng bo’lishi kerak. import numpy as np A = np.array([[1, 2], [3, 4]]) B = np.array([[5, 6], [7, 8], [9, 10]]) C = np.dot(A, B) print(C) # yoki C = A @ B print(C) 2.2.5 Hadamard ko’paytirish Matritsalarni Hadamard ko’paytirish uchun, ularning shunchaki mos elementlarini ko’paytiramiz. \\[\\mathbf{A} \\odot \\mathbf{B} = \\begin{bmatrix} a_{11} \\cdot b_{11} &amp; a_{12} \\cdot b_{12} &amp; \\ldots &amp; a_{1n} \\cdot b_{1n} \\\\ a_{21} \\cdot b_{21} &amp; a_{22} \\cdot b_{22} &amp; \\ldots &amp; a_{2n} \\cdot b_{2n} \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ a_{m1} \\cdot b_{m1} &amp; a_{m2} \\cdot b_{m2} &amp; \\ldots &amp; a_{mn} \\cdot b_{mn} \\end{bmatrix}\\] Misol uchun, agar \\(\\mathbf{A} = \\begin{bmatrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\end{bmatrix} \\quad \\text{va} \\quad \\mathbf{B} = \\begin{bmatrix} 5 &amp; 6 \\\\ 7 &amp; 8 \\end{bmatrix}\\) bo’lsa, \\[\\mathbf{A} \\odot \\mathbf{B} = \\begin{bmatrix} 1 \\cdot 5 &amp; 2 \\cdot 6 \\\\ 3 \\cdot 7 &amp; 4 \\cdot 8 \\end{bmatrix} = \\begin{bmatrix} 5 &amp; 12 \\\\ 21 &amp; 32 \\end{bmatrix}\\] import numpy as np A = np.array([[1, 2], [3, 4]]) B = np.array([[5, 6], [7, 8]]) C = np.multiply(A, B) print(C) # yoki C = A * B print(C) 2.3 Matritsa ustida boshqa amallar Matritsalarni ustida boshqa amallar ham bajarish mumkin. Ularning ba’zilari quyidagilardir: matritsa transponatsiyasi matritsa izi (trace) 2.3.1 Matritsa transponatsiyasi Matritsa transponatsiyasi - bu matritsaning ustunlarini qatorlariga, qatorlarini esa ustunlariga almashtirish amaliyotidir. Misol, agar \\(\\mathbf{A} = \\begin{bmatrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\end{bmatrix}\\) bo’lsa, uning transponatasi quyidagicha bo’ladi: \\[\\mathbf{A}^T = \\begin{bmatrix} 1 &amp; 3 \\\\ 2 &amp; 4 \\end{bmatrix}\\] import numpy as np A = np.array([[1, 2], [3, 4]]) B = A.T print(B) # yoki B = np.transpose(A) print(B) # yoki B = A.transpose() print(B) 2.3.2 Matritsa izi (trace) Matritsa izi - bu matritsaning diagonal elementlarini qo’shish amaliyotidir. \\[\\text{trace}(\\mathbf{A}) = \\sum_{i=1}^{n} a_{ii} = a_{11} + a_{22} + \\ldots + a_{nn}\\] Misol, agar \\(\\mathbf{A} = \\begin{bmatrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\end{bmatrix}\\) bo’lsa, uning izi quyidagicha bo’ladi: \\[\\text{trace}(\\mathbf{A}) = 1 + 4 = 5\\] import numpy as np A = np.array([[1, 2], [3, 4]]) t = np.trace(A) print(t) # yoki t = A.trace() print(t)"
  },"/chiziqli-algebra/jekyll/2025-01-13-vektor-kirish.html": {
    "title": "Modul 1. Vektorlar va vektor algebra",
    "keywords": "Jekyll",
    "url": "/chiziqli-algebra/jekyll/2025-01-13-vektor-kirish.html",
    "body": "Vektor sonlarning tartiblangan ro’yxati. Vektorlar odatda kvadrat yoki oddiy qavslar bilan o’ralgan massivlar bo’lib ular vertikal ravishda yoziladi: \\[\\begin{bmatrix} -1.1 \\\\ 0.0 \\\\ 3.6 \\end{bmatrix} \\begin{pmatrix}-1.1 \\\\ 0.0 \\\\ 3.6 \\end{pmatrix}\\] Ular vergul bilan ajratilgan va qavslar bilan o’ralgan raqamlar shaklida ham yozilishi mumkin: \\[(-1.1, 0.0, 3.6)\\] Umuman olganda, $n$ ta elementdan iborat vektor $\\mathbf{x}$ quyidagi ko’rinishda yoziladi: \\[\\mathbf{x} = \\begin{bmatrix} x_1 \\\\ x_2 \\\\ \\vdots \\\\ x_n \\end{bmatrix}\\] $x_i$ - vektorning $i$-chi elementi Diqqat! Butun darsda vektorlar $\\mathbf{v}$ qalinlashtirilgan shaklda bilan ko’rsatiladi. Sonlar esa $v$ kursiv shaklda ko’rsatiladi. Vektorning geometrik tushunchasi esa, vektorning nuqtadan boshlab boshqa nuqta yo’nalishini ko’rsatadi. Manba: 3blue1brown import numpy as np # Vektor yaratish vektor = np.array([-1.1, 0.0, 3.6]) print(vektor) # Vektorning o'lchami print(vektor.shape) # Vektorning elementlari print(vektor[0], vektor[1], vektor[2]) 1.1 Vektor ustida amallar Chiziqli algebraning yuragida ikkita vektor ustida amallar bor. Bular: qo’shish songa ko’paytirish 1.1.1 Vektorlarni Qo’shish Ikkita vektorni (masalan, $\\mathbf{v}$ va $\\mathbf{w}$ ) bir biriga qo’shish uchun ularning mos elementlarini qo’shish kerak. \\[\\mathbf{v} = \\begin{bmatrix} v_1 \\\\ v_2 \\end{bmatrix} \\quad \\text{va} \\quad \\mathbf{w} = \\begin{bmatrix} w_1 \\\\ w_2 \\end{bmatrix}, \\quad \\mathbf{v} + \\mathbf{w} = \\begin{bmatrix} v_1 \\\\ v_2 \\end{bmatrix} + \\begin{bmatrix} w_1 \\\\ w_2 \\end{bmatrix} = \\begin{bmatrix} v_1 + w_1 \\\\ v_2 + w_2 \\end{bmatrix}\\] Misol uchun, ikkita vektorning qo’shish amali quyidagicha: \\[\\mathbf{v} = \\begin{bmatrix} 1 \\\\ 2 \\end{bmatrix} \\quad \\text{va} \\quad \\mathbf{w} = \\begin{bmatrix} 4 \\\\ 5 \\end{bmatrix}, \\quad \\mathbf{v} + \\mathbf{w} = \\begin{bmatrix} 1 \\\\ 2 \\end{bmatrix} + \\begin{bmatrix} 4 \\\\ 5 \\end{bmatrix} = \\begin{bmatrix} 5 \\\\ 7 \\end{bmatrix}\\] Diqqat! Faqat bir hil o’lchamli vektorlarni qo’shish mumkin Manba: 3blue1brown import numpy as np # Vektor yaratish vektor1 = np.array([-1.1, 0.0, 3.6]) vektor2 = np.array([1.1, 0.0, 3.6]) # Vektorlarni qo'shish vektor3 = vektor1 + vektor2 print(vektor3) 1.1.2 Vektorlarni songa ko’paytirish Vektorni ma’lum bir songa ($\\alpha \\in \\mathbb{R}$) ko’paytirish uchun, vektorning har bir elementini ushbu songa ko’paytiramiz. \\[\\mathbf{v} = \\begin{bmatrix} v_1 \\\\ v_2 \\end{bmatrix} \\quad \\text{va} \\quad \\alpha, \\quad \\alpha \\cdot \\mathbf{v} = \\alpha \\cdot \\begin{bmatrix} v_1 \\\\ v_2 \\end{bmatrix} = \\begin{bmatrix} \\alpha \\cdot v_1 \\\\ \\alpha \\cdot v_2 \\end{bmatrix}\\] Misol uchun: \\[\\mathbf{v} = \\begin{bmatrix} 1 \\\\ 2 \\end{bmatrix}, \\quad \\alpha = 3, \\quad \\alpha \\cdot \\mathbf{v} = 3 \\cdot \\begin{bmatrix} 1 \\\\ 2 \\end{bmatrix} = \\begin{bmatrix} 3 \\\\ 6 \\end{bmatrix}\\] Manba: 3blue1brown import numpy as np vektor = np.array([-1.1, 0.0, 3.6]) alpha = 3.0 # Vektorlarni songa ko'paytirish vektor_scaled = alpha * vektor print(vektor_scaled) 1.2 Vektor Normalari va Skalyar Ko’paytirish Vektorlarning songa ko’paytirish va qo’shish amallarini o’rganishdan keyin, vektorlarning normalari va skalyar ko’paytirishini o’rganamiz. 1.2.1 Vektorlarni Skalyar Ko’paytirish Bizda $\\mathbf{a} = \\begin{bmatrix} a_1 &amp; a_2 &amp; … &amp; a_n \\end{bmatrix}$ va $\\mathbf{b} = \\begin{bmatrix} b_1 &amp; b_2 &amp; … &amp; b_n \\end{bmatrix}$ vektorlar bor. Ularning skalyar ko’paytmasi: \\[\\boxed{\\mathbf{a} \\cdot \\mathbf{b} = a_1 b_1 + a_2 b_2 + \\ldots + a_n b_n}\\] \\[= \\sum_{i=1}^{n} a_i b_i\\] \\[= \\mathbf{a}^T \\mathbf{b}\\] Misol: agar $\\mathbf{a} = \\begin{bmatrix} 1 &amp; 2 &amp; 3 \\end{bmatrix}$ va $\\mathbf{b} = \\begin{bmatrix} 4 &amp; 5 &amp; 6 \\end{bmatrix}$ bo’lsa, \\(\\mathbf{a} \\cdot \\mathbf{b} = 1 \\cdot 4 + 2 \\cdot 5 + 3 \\cdot 6 = 4 + 10 + 18 = 32\\) import numpy as np vektor1 = np.array([1, 2, 3]) vektor2 = np.array([4, 5, 6]) # Skalyar ko'paytirish skalyar = np.dot(vektor1, vektor2) # yoki skalyar = vektor1 @ vektor2 print(skalyar) 1.2.2 Vektor Normasi Berilgan ${\\displaystyle p\\geq 1}$ haqiqiy soni uchun, $\\mathbf{v} = \\begin{bmatrix} v_1 &amp; v_2 &amp; \\ldots &amp; v_n \\end{bmatrix}$ vektorning $p$-normasi quyidagi ko’rinishda aniqlanadi: \\[\\boxed{\\| \\mathbf{v} \\|_p = \\left( \\sum_{i=1}^{n} |v_i|^p \\right)^{1/p}}\\] Ko’p qo’llaniladigan normalar bular: $p = 1$ - Manhettan uzunligi yoki $\\ell_1$ normasi \\[\\| \\mathbf{v} \\|_1 = |v_1| + |v_2| + \\ldots + |v_n| = \\sum_{i=1}^{n} |v_i|\\] $p = 2$ - Evklid uzunligi yoki $\\ell_2$ normasi \\[\\| \\mathbf{v} \\|_2 = \\sqrt{v_1^2 + v_2^2 + \\ldots + v_n^2} = \\sqrt{\\sum_{i=1}^{n} v_i^2}\\] $p = \\infty$ - Maksimum normasi yani vektorning eng katta elementi $\\max$ operatori orqali aniqlanadi. \\[\\| \\mathbf{v} \\|_{\\infty} = \\max \\{ |v_1|, |v_2|, \\ldots, |v_n| \\}\\] import numpy as np vektor = np.array([1, 2, 3]) l1_norma = np.linalg.norm(vektor, ord=1) # L1 norma l2_norma = np.linalg.norm(vektor, ord=2) # L2 norma l_inf_norma = np.linalg.norm(vektor, ord=np.inf) # L-inf norma 1.2.3 Vektor Normalari Amalda Qo’llanilishi Birlik vektor (normalangan vektor): \\[\\boxed{\\mathbf {\\hat {u}} ={\\frac {\\mathbf {u} }{\\|\\mathbf {u} \\|}}}\\] va uzunligi 1 ga teng bo’lgan vektor \\(\\|\\mathbf {\\hat {u}} \\| = 1\\) import numpy as np vektor = np.array([1, 2, 3]) birlik_vektor = vektor / np.linalg.norm(vektor) print(birlik_vektor) print(\"uzunligi:\", np.linalg.norm(birlik_vektor)) Masofa (Distance) formulasi: \\[\\boxed{d(\\mathbf{v}, \\mathbf{w}) = \\| \\mathbf{v} - \\mathbf{w} \\|}\\] Ikki vektor orasidagi burchak (Angle between vectors) formulasi: \\[\\boxed{\\cos \\theta = \\frac{\\mathbf{v} \\cdot \\mathbf{w}}{\\| \\mathbf{v} \\| \\| \\mathbf{w} \\|}}\\] import numpy as np vektor1 = np.array([1, 2, 3]) vektor2 = np.array([4, 5, 6]) # Masofa masofa = np.linalg.norm(vektor1 - vektor2) # Kosinus burchak cos_theta = np.dot(vektor1, vektor2) / (np.linalg.norm(vektor1) * np.linalg.norm(vektor2)) 1.3 Chiziqli kombinatsiya va Chiziqli bog’liqlik 1.3.1 Chiziqli Kombinatsiya Agar $\\mathbf{v_1}, \\mathbf{v_2}, \\ldots, \\mathbf{v_n}$ vektorlar va $\\alpha_1, \\alpha_2, \\ldots, \\alpha_n$ skalyar sonlar bo’lsa, ularning chiziqli kombinatsiyalari yangi vektor: \\[\\boxed{\\mathbf{v} = \\alpha_1 \\mathbf{v_1} + \\alpha_2 \\mathbf{v_2} + \\ldots + \\alpha_n \\mathbf{v_n}}\\] 1.3.2 Chiziqli Bog’liqlik Deylik $\\mathbf{v}_1, \\mathbf{v}_2, \\ldots, \\mathbf{v}_n$ vektorlar to’plami. Agar $\\alpha_1, \\alpha_2, \\ldots, \\alpha_n$ skalyarlar bo’lsa va: \\[\\boxed{\\alpha_1 \\mathbf{v}_1 + \\alpha_2 \\mathbf{v}_2 + \\ldots + \\alpha_n \\mathbf{v}_n = \\mathbf{0}}\\] bunda faqat $\\alpha_1 = \\alpha_2 = \\ldots = \\alpha_n = 0$ shartni qanoatlantirsa, $\\mathbf{v}_1, \\mathbf{v}_2, \\ldots, \\mathbf{v}_n$ vektorlar bog’liq emas deb ataladi. Aks holda, ular bog’liq deb ataladi."
  }}
